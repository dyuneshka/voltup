import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { 
  addTariff, 
  updateTariff, 
  deleteTariff, 
  setFilters, 
  setActiveTab, 
  setShowAddForm,
  toggleTariffStatus
} from '../redux/slices/tariffManagementSlice';
import '../styles/tariff-management.scss';

const TariffManagement = () => {
  const dispatch = useDispatch();
  const { 
    tariffs, 
    workTypes, 
    capitalCostTypes, 
    filters, 
    activeTab, 
    showAddForm 
  } = useSelector(state => state.tariffManagement);
  
  const [editingTariff, setEditingTariff] = useState(null);
  const [formData, setFormData] = useState({
    voltage: '–ù–ù',
    powerFrom: 0,
    powerTo: '',
    settlementType: '–ì–æ—Ä–æ–¥—Å–∫–æ–π',
    rate: '–°1',
    workType: '',
    capitalCostType: '',
    costIndex: 1.0,
    ratePerKw: 0,
    standardizedRate: 0,
    multiplyByIndex: false,
    multiplyByPower: true,
    multiplyByQuantity: false
  });

  const getVoltageColor = (voltage) => {
    switch (voltage) {
      case '–ù–ù': return '#4CAF50';
      case '–°–ù2': return '#2196F3';
      case '–°–ù1': return '#FF9800';
      case '–í–ù': return '#F44336';
      default: return '#757575';
    }
  };

  const getStatusColor = (status) => {
    return status === '–ê–∫—Ç–∏–≤–Ω—ã–π' ? '#4CAF50' : '#F44336';
  };

  const getSettlementTypeColor = (type) => {
    return type === '–ì–æ—Ä–æ–¥—Å–∫–æ–π' ? '#2196F3' : '#FF9800';
  };

  const filteredTariffs = tariffs.filter(tariff => {
    if (filters.voltage !== 'all' && tariff.voltage !== filters.voltage) return false;
    if (filters.settlementType !== 'all' && tariff.settlementType !== filters.settlementType) return false;
    if (filters.status !== 'all' && tariff.status !== filters.status) return false;
    if (filters.workType !== 'all' && tariff.workType !== filters.workType) return false;
    return true;
  });

  const handleAddTariff = () => {
    dispatch(addTariff(formData));
    setFormData({
      voltage: '–ù–ù',
      powerFrom: 0,
      powerTo: '',
      settlementType: '–ì–æ—Ä–æ–¥—Å–∫–æ–π',
      rate: '–°1',
      workType: '',
      capitalCostType: '',
      costIndex: 1.0,
      ratePerKw: 0,
      standardizedRate: 0,
      multiplyByIndex: false,
      multiplyByPower: true,
      multiplyByQuantity: false
    });
    dispatch(setShowAddForm(false));
  };

  const handleUpdateTariff = () => {
    dispatch(updateTariff({ id: editingTariff.id, updates: formData }));
    setEditingTariff(null);
    setFormData({
      voltage: '–ù–ù',
      powerFrom: 0,
      powerTo: '',
      settlementType: '–ì–æ—Ä–æ–¥—Å–∫–æ–π',
      rate: '–°1',
      workType: '',
      capitalCostType: '',
      costIndex: 1.0,
      ratePerKw: 0,
      standardizedRate: 0,
      multiplyByIndex: false,
      multiplyByPower: true,
      multiplyByQuantity: false
    });
  };

  const handleEditTariff = (tariff) => {
    setEditingTariff(tariff);
    setFormData({
      voltage: tariff.voltage,
      powerFrom: tariff.powerFrom,
      powerTo: tariff.powerTo || '',
      settlementType: tariff.settlementType,
      rate: tariff.rate,
      workType: tariff.workType,
      capitalCostType: tariff.capitalCostType,
      costIndex: tariff.costIndex,
      ratePerKw: tariff.ratePerKw,
      standardizedRate: tariff.standardizedRate,
      multiplyByIndex: tariff.multiplyByIndex,
      multiplyByPower: tariff.multiplyByPower,
      multiplyByQuantity: tariff.multiplyByQuantity
    });
  };

  const handleDeleteTariff = (id) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ?')) {
      dispatch(deleteTariff(id));
    }
  };

  const handleFilterChange = (filterType, value) => {
    dispatch(setFilters({ [filterType]: value }));
  };

  const handleTabChange = (tab) => {
    dispatch(setActiveTab(tab));
  };

  const getVoltageDescription = (voltage) => {
    switch (voltage) {
      case '–ù–ù': return '–¥–æ 0,4 –∫–í';
      case '–°–ù2': return '–æ—Ç 1 –¥–æ 20 –∫–í';
      case '–°–ù1': return '35 –∫–í';
      case '–í–ù': return '110 –∫–í –∏ –≤—ã—à–µ';
      default: return '';
    }
  };

  return (
    <div className="tariff-management">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
      <div className="tariff-header">
        <div className="header-content">
          <h1>
            <span className="icon">üí∞</span>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞ –¢–ü
          </h1>
          <p>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</p>
        </div>
        <div className="header-stats">
          <div className="stat-item">
            <span className="stat-number">{tariffs.length}</span>
            <span className="stat-label">–í—Å–µ–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">
              {tariffs.filter(t => t.status === '–ê–∫—Ç–∏–≤–Ω—ã–π').length}
            </span>
            <span className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">
              {tariffs.filter(t => t.status === '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π').length}
            </span>
            <span className="stat-label">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</span>
          </div>
        </div>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="tabs-section">
        <div className="tabs">
          <button 
            className={`tab ${activeTab === 'new' ? 'active' : ''}`}
            onClick={() => handleTabChange('new')}
          >
            <span className="icon">üÜï</span>
            –¢–∞—Ä–∏—Ñ—ã –Ω–æ–≤—ã–µ
          </button>
          <button 
            className={`tab ${activeTab === 'old' ? 'active' : ''}`}
            onClick={() => handleTabChange('old')}
          >
            <span className="icon">üìã</span>
            –¢–∞—Ä–∏—Ñ—ã
          </button>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="filters-section">
        <div className="filters-grid">
          <div className="filter-group">
            <label>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</label>
            <select 
              value={filters.voltage} 
              onChange={(e) => handleFilterChange('voltage', e.target.value)}
            >
              <option value="all">–í—Å–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è</option>
              <option value="–ù–ù">–ù–ù (–¥–æ 0,4 –∫–í)</option>
              <option value="–°–ù2">–°–ù2 (–æ—Ç 1 –¥–æ 20 –∫–í)</option>
              <option value="–°–ù1">–°–ù1 (35 –∫–í)</option>
              <option value="–í–ù">–í–ù (110 –∫–í –∏ –≤—ã—à–µ)</option>
            </select>
          </div>
          <div className="filter-group">
            <label>–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:</label>
            <select 
              value={filters.settlementType} 
              onChange={(e) => handleFilterChange('settlementType', e.target.value)}
            >
              <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
              <option value="–ì–æ—Ä–æ–¥—Å–∫–æ–π">–ì–æ—Ä–æ–¥—Å–∫–æ–π</option>
              <option value="–°–µ–ª—å—Å–∫–∏–π">–°–µ–ª—å—Å–∫–∏–π</option>
            </select>
          </div>
          <div className="filter-group">
            <label>–°—Ç–∞—Ç—É—Å:</label>
            <select 
              value={filters.status} 
              onChange={(e) => handleFilterChange('status', e.target.value)}
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="–ê–∫—Ç–∏–≤–Ω—ã–π">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
              <option value="–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π</option>
            </select>
          </div>
          <div className="filter-group">
            <label>–í–∏–¥ —Ä–∞–±–æ—Ç:</label>
            <select 
              value={filters.workType} 
              onChange={(e) => handleFilterChange('workType', e.target.value)}
            >
              <option value="all">–í—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç</option>
              {workTypes.map(type => (
                <option key={type} value={type}>{type}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div className="actions-section">
        <button 
          className="btn-add"
          onClick={() => dispatch(setShowAddForm(true))}
        >
          <span className="icon">‚ûï</span>
          –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ
        </button>
      </div>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {(showAddForm || editingTariff) && (
        <div className="form-overlay">
          <div className="form-modal">
            <div className="form-header">
              <h3>{editingTariff ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞'}</h3>
              <button 
                className="close-btn"
                onClick={() => {
                  dispatch(setShowAddForm(false));
                  setEditingTariff(null);
                }}
              >
                ‚úï
              </button>
            </div>
            
            <div className="form-content">
              <div className="form-grid">
                <div className="form-group">
                  <label>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</label>
                  <select 
                    value={formData.voltage}
                    onChange={(e) => setFormData({...formData, voltage: e.target.value})}
                  >
                    <option value="–ù–ù">–ù–ù (–¥–æ 0,4 –∫–í)</option>
                    <option value="–°–ù2">–°–ù2 (–æ—Ç 1 –¥–æ 20 –∫–í)</option>
                    <option value="–°–ù1">–°–ù1 (35 –∫–í)</option>
                    <option value="–í–ù">–í–ù (110 –∫–í –∏ –≤—ã—à–µ)</option>
                  </select>
                </div>
                
                <div className="form-group">
                  <label>–ú–æ—â–Ω–æ—Å—Ç—å –æ—Ç (–∫–í—Ç):</label>
                  <input 
                    type="number"
                    value={formData.powerFrom}
                    onChange={(e) => setFormData({...formData, powerFrom: Number(e.target.value)})}
                  />
                </div>
                
                <div className="form-group">
                  <label>–ú–æ—â–Ω–æ—Å—Ç—å –¥–æ (–∫–í—Ç):</label>
                  <input 
                    type="number"
                    value={formData.powerTo}
                    onChange={(e) => setFormData({...formData, powerTo: e.target.value ? Number(e.target.value) : ''})}
                    placeholder="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
                  />
                </div>
                
                <div className="form-group">
                  <label>–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:</label>
                  <select 
                    value={formData.settlementType}
                    onChange={(e) => setFormData({...formData, settlementType: e.target.value})}
                  >
                    <option value="–ì–æ—Ä–æ–¥—Å–∫–æ–π">–ì–æ—Ä–æ–¥—Å–∫–æ–π</option>
                    <option value="–°–µ–ª—å—Å–∫–∏–π">–°–µ–ª—å—Å–∫–∏–π</option>
                  </select>
                </div>
                
                <div className="form-group">
                  <label>–°—Ç–∞–≤–∫–∞:</label>
                  <input 
                    type="text"
                    value={formData.rate}
                    onChange={(e) => setFormData({...formData, rate: e.target.value})}
                    placeholder="–°1, –°2, –°3, –°4"
                  />
                </div>
                
                <div className="form-group">
                  <label>–í–∏–¥ —Ä–∞–±–æ—Ç—ã –ø–æ –¢–ü:</label>
                  <select 
                    value={formData.workType}
                    onChange={(e) => setFormData({...formData, workType: e.target.value})}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç</option>
                    {workTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
                
                <div className="form-group">
                  <label>–í–∏–¥ –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç:</label>
                  <select 
                    value={formData.capitalCostType}
                    onChange={(e) => setFormData({...formData, capitalCostType: e.target.value})}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∑–∞—Ç—Ä–∞—Ç</option>
                    {capitalCostTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
                
                <div className="form-group">
                  <label>–ò–Ω–¥–µ–∫—Å —Å–º–µ—Ç–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</label>
                  <input 
                    type="number"
                    step="0.1"
                    value={formData.costIndex}
                    onChange={(e) => setFormData({...formData, costIndex: Number(e.target.value)})}
                  />
                </div>
                
                <div className="form-group">
                  <label>–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–∫–í—Ç):</label>
                  <input 
                    type="number"
                    value={formData.ratePerKw}
                    onChange={(e) => setFormData({...formData, ratePerKw: Number(e.target.value)})}
                  />
                </div>
                
                <div className="form-group">
                  <label>–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</label>
                  <input 
                    type="number"
                    value={formData.standardizedRate}
                    onChange={(e) => setFormData({...formData, standardizedRate: Number(e.target.value)})}
                  />
                </div>
              </div>
              
              <div className="form-checkboxes">
                <div className="checkbox-group">
                  <label>
                    <input 
                      type="checkbox"
                      checked={formData.multiplyByIndex}
                      onChange={(e) => setFormData({...formData, multiplyByIndex: e.target.checked})}
                    />
                    –£–º–Ω–æ–∂–∞—Ç—å –Ω–∞ –∏–Ω–¥–µ–∫—Å
                  </label>
                </div>
                <div className="checkbox-group">
                  <label>
                    <input 
                      type="checkbox"
                      checked={formData.multiplyByPower}
                      onChange={(e) => setFormData({...formData, multiplyByPower: e.target.checked})}
                    />
                    –£–º–Ω–æ–∂–∞—Ç—å –Ω–∞ –º–æ—â–Ω–æ—Å—Ç—å
                  </label>
                </div>
                <div className="checkbox-group">
                  <label>
                    <input 
                      type="checkbox"
                      checked={formData.multiplyByQuantity}
                      onChange={(e) => setFormData({...formData, multiplyByQuantity: e.target.checked})}
                    />
                    –£–º–Ω–æ–∂–∞—Ç—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                  </label>
                </div>
              </div>
            </div>
            
            <div className="form-actions">
              <button 
                className="btn-cancel"
                onClick={() => {
                  dispatch(setShowAddForm(false));
                  setEditingTariff(null);
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                className="btn-save"
                onClick={editingTariff ? handleUpdateTariff : handleAddTariff}
              >
                {editingTariff ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ */}
      <div className="tariffs-table">
        <div className="table-header">
          <div className="table-row header">
            <div className="cell">–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ</div>
            <div className="cell">–ú–æ—â–Ω–æ—Å—Ç—å</div>
            <div className="cell">–¢–∏–ø –Ω–∞—Å. –ø—É–Ω–∫—Ç–∞</div>
            <div className="cell">–°—Ç–∞–≤–∫–∞</div>
            <div className="cell">–í–∏–¥ —Ä–∞–±–æ—Ç—ã</div>
            <div className="cell">–°—Ç–∞–≤–∫–∞ (—Ä—É–±./–∫–í—Ç)</div>
            <div className="cell">–°—Ç–∞—Ç—É—Å</div>
            <div className="cell">–î–µ–π—Å—Ç–≤–∏—è</div>
          </div>
        </div>
        
        <div className="table-body">
          {filteredTariffs.map(tariff => (
            <div key={tariff.id} className="table-row">
              <div className="cell">
                <div className="voltage-info">
                  <span 
                    className="voltage-badge"
                    style={{ backgroundColor: getVoltageColor(tariff.voltage) }}
                  >
                    {tariff.voltage}
                  </span>
                  <span className="voltage-description">{getVoltageDescription(tariff.voltage)}</span>
                </div>
              </div>
              
              <div className="cell">
                <div className="power-range">
                  {tariff.powerFrom} - {tariff.powerTo || '‚àû'} –∫–í—Ç
                </div>
              </div>
              
              <div className="cell">
                <span 
                  className="settlement-type"
                  style={{ color: getSettlementTypeColor(tariff.settlementType) }}
                >
                  {tariff.settlementType}
                </span>
              </div>
              
              <div className="cell">
                <span className="rate">{tariff.rate}</span>
              </div>
              
              <div className="cell">
                <div className="work-type">
                  <span className="work-name">{tariff.workType}</span>
                  <span className="capital-cost">{tariff.capitalCostType}</span>
                </div>
              </div>
              
              <div className="cell">
                <div className="rate-info">
                  <span className="rate-per-kw">{tariff.ratePerKw.toLocaleString()} ‚ÇΩ/–∫–í—Ç</span>
                  <span className="standardized-rate">
                    –°—Ç–∞–Ω–¥–∞—Ä—Ç: {tariff.standardizedRate.toLocaleString()} ‚ÇΩ
                  </span>
                </div>
              </div>
              
              <div className="cell">
                <span 
                  className="status-badge"
                  style={{ backgroundColor: getStatusColor(tariff.status) }}
                >
                  {tariff.status}
                </span>
              </div>
              
              <div className="cell">
                <div className="actions">
                  <button 
                    className="btn-edit"
                    onClick={() => handleEditTariff(tariff)}
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  >
                    ‚úèÔ∏è
                  </button>
                  <button 
                    className="btn-toggle"
                    onClick={() => dispatch(toggleTariffStatus(tariff.id))}
                    title={tariff.status === '–ê–∫—Ç–∏–≤–Ω—ã–π' ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                  >
                    {tariff.status === '–ê–∫—Ç–∏–≤–Ω—ã–π' ? 'üî¥' : 'üü¢'}
                  </button>
                  <button 
                    className="btn-delete"
                    onClick={() => handleDeleteTariff(tariff.id)}
                    title="–£–¥–∞–ª–∏—Ç—å"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="info-panel">
        <div className="info-section">
          <h4>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é</h4>
          <ul>
            <li><strong>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</strong> –ù–ù - –¥–æ 0,4 –∫–í, –°–ù2 - –æ—Ç 1 –¥–æ 20 –∫–í, –°–ù1 - 35 –∫–í, –í–ù - 110 –∫–í –∏ –≤—ã—à–µ</li>
            <li><strong>–¢–∏–ø –Ω–∞—Å. –ø—É–Ω–∫—Ç–∞:</strong> –ì–æ—Ä–æ–¥—Å–∫–æ–π –∏–ª–∏ –°–µ–ª—å—Å–∫–∏–π</li>
            <li><strong>–°—Ç–∞–≤–∫–∞:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç</li>
            <li><strong>–ò–Ω–¥–µ–∫—Å —Å–º–µ—Ç–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</strong> –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞</li>
            <li><strong>–§–ª–∞–≥–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è:</strong> –û–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏</li>
          </ul>
        </div>
        
        <div className="info-section">
          <h4>üí° –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞</h4>
          <p>–î–ª—è —Å—Ç–∞–≤–∫–∏ –°2: –ò–Ω–¥–µ–∫—Å = 0,5, –£–º–Ω–æ–∂–∞—Ç—å –Ω–∞ –∏–Ω–¥–µ–∫—Å = –î–∞, –£–º–Ω–æ–∂–∞—Ç—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –î–∞</p>
          <p>–§–æ—Ä–º—É–ª–∞: –°—Ç–æ–∏–º–æ—Å—Ç—å = –°—Ç–∞–≤–∫–∞ √ó 0,5 √ó –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å –í–õ</p>
        </div>
      </div>
    </div>
  );
};

export default TariffManagement; 