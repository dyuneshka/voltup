import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { useNavigate, Link } from 'react-router-dom';
import Chart from 'chart.js/auto';
import { Line, Doughnut } from 'react-chartjs-2';

import '../styles/dashboard.scss';

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserPanel = ({ user }) => (
  <div className="user-panel-modern">
    <div className="user-info-modern">
      <div className="user-avatar-modern">
        <div className="avatar-circle">
          {user.name ? user.name.charAt(0).toUpperCase() : 'U'}
        </div>
        <div className="status-indicator online"></div>
      </div>
      <div className="user-details-modern">
        <h3 className="user-name">{user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
        <p className="user-role-modern">
          <span className="role-badge">{user.role === 'applicant' ? '–ó–∞—è–≤–∏—Ç–µ–ª—å' : user.role}</span>
        </p>
        {user.organization && (
          <p className="user-organization-modern">
            <span className="org-icon">üè¢</span>
            {user.organization}
          </p>
        )}
      </div>
    </div>
    <div className="user-stats-modern">
      <div className="stat-card-modern">
        <div className="stat-icon-modern">üìä</div>
        <div className="stat-content">
          <span className="stat-number-modern">2</span>
          <span className="stat-label-modern">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫</span>
        </div>
      </div>
      <div className="stat-card-modern">
        <div className="stat-icon-modern">‚ö°</div>
        <div className="stat-content">
          <span className="stat-number-modern">1,250</span>
          <span className="stat-label-modern">–∫–í—Ç¬∑—á –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ</span>
        </div>
      </div>
      <div className="stat-card-modern">
        <div className="stat-icon-modern">üí∞</div>
        <div className="stat-content">
          <span className="stat-number-modern">15,000 ‚ÇΩ</span>
          <span className="stat-label-modern">–ë–∞–ª–∞–Ω—Å</span>
        </div>
      </div>
    </div>
  </div>
);

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
const ConsumptionChart = ({ consumption, realTimeReading }) => {
  // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
  const generateChartData = () => {
    const now = new Date();
    const labels = [];
    const currentData = [];
    const previousData = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    for (let i = 5; i >= 0; i--) {
      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
      const monthName = date.toLocaleDateString('ru-RU', { month: 'short' });
      labels.push(monthName);
      
      // –ë–∞–∑–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
      const baseConsumption = realTimeReading * (0.8 + Math.random() * 0.4);
      currentData.push(Math.round(baseConsumption));
      
      // –î–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ (–Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ)
      const previousBase = baseConsumption * (0.85 + Math.random() * 0.2);
      previousData.push(Math.round(previousBase));
    }
    
    return { labels, currentData, previousData };
  };

  const { labels, currentData, previousData } = generateChartData();

  const chartData = {
    labels: labels,
    datasets: [
      {
        label: '–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ (–∫–í—Ç¬∑—á)',
        data: currentData,
        borderColor: 'rgba(102, 126, 234, 1)',
        backgroundColor: 'rgba(102, 126, 234, 0.1)',
        fill: true,
        tension: 0.4,
        borderWidth: 3,
        pointBackgroundColor: 'rgba(102, 126, 234, 1)',
        pointBorderColor: '#fff',
        pointBorderWidth: 2,
        pointRadius: 6,
        pointHoverRadius: 8,
        pointHoverBackgroundColor: 'rgba(102, 126, 234, 1)',
        pointHoverBorderColor: '#fff',
        pointHoverBorderWidth: 3,
      },
      {
        label: '–ü—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥ (–∫–í—Ç¬∑—á)',
        data: previousData,
        borderColor: 'rgba(118, 75, 162, 1)',
        backgroundColor: 'rgba(118, 75, 162, 0.1)',
        fill: false,
        tension: 0.4,
        borderWidth: 2,
        borderDash: [5, 5],
        pointBackgroundColor: 'rgba(118, 75, 162, 1)',
        pointBorderColor: '#fff',
        pointBorderWidth: 2,
        pointRadius: 4,
        pointHoverRadius: 6,
        pointHoverBackgroundColor: 'rgba(118, 75, 162, 1)',
        pointHoverBorderColor: '#fff',
        pointHoverBorderWidth: 3,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    interaction: {
      intersect: false,
      mode: 'index',
    },
    animation: {
      duration: 2000,
      easing: 'easeInOutQuart',
      onProgress: function(animation) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞
      },
      onComplete: function(animation) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      }
    },
    scales: {
      x: { 
        title: { 
          display: true, 
          text: '–ú–µ—Å—è—Ü', 
          color: '#4a5568', 
          font: { weight: '600', size: 14 } 
        },
        grid: { 
          color: 'rgba(226, 232, 240, 0.5)',
          drawBorder: false
        },
        ticks: {
          color: '#718096',
          font: { weight: '500' }
        }
      },
      y: { 
        title: { 
          display: true, 
          text: '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)', 
          color: '#4a5568', 
          font: { weight: '600', size: 14 } 
        }, 
        beginAtZero: true,
        grid: { 
          color: 'rgba(226, 232, 240, 0.5)',
          drawBorder: false
        },
        ticks: {
          color: '#718096',
          font: { weight: '500' },
          callback: function(value) {
            return value.toLocaleString() + ' –∫–í—Ç¬∑—á';
          }
        }
      },
    },
    plugins: { 
      legend: { 
        position: 'top',
        labels: {
          usePointStyle: true,
          padding: 20,
          font: { weight: '600', size: 12 },
          color: '#4a5568'
        }
      },
      tooltip: {
        backgroundColor: 'rgba(255, 255, 255, 0.95)',
        titleColor: '#2d3748',
        bodyColor: '#4a5568',
        borderColor: 'rgba(102, 126, 234, 0.2)',
        borderWidth: 1,
        cornerRadius: 8,
        displayColors: true,
        titleFont: { weight: '600', size: 14 },
        bodyFont: { size: 13 },
        callbacks: {
          label: function(context) {
            return context.dataset.label + ': ' + context.parsed.y.toLocaleString() + ' –∫–í—Ç¬∑—á';
          }
        }
      }
    },
    elements: {
      point: {
        hoverRadius: 8,
        radius: 6,
      }
    }
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–º –≥—Ä–∞—Ñ–∏–∫–∞
  const [chartPeriod, setChartPeriod] = useState('month');

  const handlePeriodChange = (period) => {
    setChartPeriod(period);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
  };

  return (
    <section className="dashboard-section-modern chart-section-modern">
      <div className="section-header-modern">
        <h3 className="section-title-modern">
          <span className="title-icon">üìà</span>
          –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏
          <span className="chart-live-indicator">
            <span className="live-dot"></span>
            –ñ–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          </span>
        </h3>
        <div className="chart-controls">
          <button 
            className={`chart-period-btn ${chartPeriod === 'month' ? 'active' : ''}`}
            onClick={() => handlePeriodChange('month')}
          >
            –ú–µ—Å—è—Ü
          </button>
          <button 
            className={`chart-period-btn ${chartPeriod === 'quarter' ? 'active' : ''}`}
            onClick={() => handlePeriodChange('quarter')}
          >
            –ö–≤–∞—Ä—Ç–∞–ª
          </button>
          <button 
            className={`chart-period-btn ${chartPeriod === 'year' ? 'active' : ''}`}
            onClick={() => handlePeriodChange('year')}
          >
            –ì–æ–¥
          </button>
        </div>
      </div>
      <div className="chart-container-modern">
        <Line data={chartData} options={chartOptions} />
      </div>
      <div className="chart-stats-modern">
        <div className="stat-item-modern">
          <span className="stat-label-modern">–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ:</span>
          <span className="stat-value-modern">{realTimeReading.toFixed(2)} –∫–í—Ç¬∑—á</span>
        </div>
        <div className="stat-item-modern">
          <span className="stat-label-modern">–°—Ä–µ–¥–Ω–µ–µ –∑–∞ –º–µ—Å—è—Ü:</span>
          <span className="stat-value-modern">
            {(currentData.reduce((a, b) => a + b, 0) / currentData.length).toFixed(0)} –∫–í—Ç¬∑—á
          </span>
        </div>
        <div className="stat-item-modern">
          <span className="stat-label-modern">–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</span>
          <span className={`stat-value-modern ${currentData[currentData.length - 1] > previousData[previousData.length - 1] ? 'positive' : 'negative'}`}>
            {currentData[currentData.length - 1] > previousData[previousData.length - 1] ? '‚Üó' : '‚Üò'} 
            {Math.abs(currentData[currentData.length - 1] - previousData[previousData.length - 1]).toFixed(0)} –∫–í—Ç¬∑—á
          </span>
        </div>
      </div>
    </section>
  );
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞
const MeterReading = ({ realTimeReading, compareData }) => (
  <section className="dashboard-section-modern meter-section-modern">
    <div className="section-header-modern">
      <h3 className="section-title-modern">
        <span className="title-icon">üîå</span>
        –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
      </h3>
      <div className="real-time-indicator">
        <span className="pulse-dot"></span>
        –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
      </div>
    </div>
    <div className="stats-grid-modern">
      <div className="stat-card-modern primary">
        <div className="stat-icon-large">‚ö°</div>
        <div className="stat-content">
          <span className="stat-number-large">{realTimeReading.toFixed(2)}</span>
          <span className="stat-label-large">–∫–í—Ç¬∑—á (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)</span>
        </div>
        <div className="stat-trend positive">
          <span>‚Üó</span>
          <span>+2.3%</span>
        </div>
      </div>
      <div className="stat-card-modern">
        <div className="stat-icon-large">üìä</div>
        <div className="stat-content">
          <span className="stat-number-large">{compareData.current.toFixed(2)}</span>
          <span className="stat-label-large">–∫–í—Ç¬∑—á (—Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥)</span>
        </div>
      </div>
      <div className="stat-card-modern">
        <div className="stat-icon-large">üìÖ</div>
        <div className="stat-content">
          <span className="stat-number-large">{compareData.previous}</span>
          <span className="stat-label-large">–∫–í—Ç¬∑—á (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥)</span>
        </div>
      </div>
      <div className="stat-card-modern">
        <div className="stat-icon-large">üìà</div>
        <div className="stat-content">
          <span className="stat-number-large">{(compareData.current - compareData.previous).toFixed(2)}</span>
          <span className="stat-label-large">–∫–í—Ç¬∑—á (—Ä–∞–∑–Ω–∏—Ü–∞)</span>
        </div>
      </div>
    </div>
  </section>
);

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç
const PaymentHistory = ({ paymentHistory, filterDate, setFilterDate, handlePayment }) => {
  const filteredPayments = paymentHistory.filter(p =>
    !filterDate || new Date(p.date).toISOString().startsWith(filterDate)
  );

  return (
    <section className="dashboard-section-modern payment-section-modern">
      <div className="section-header-modern">
        <h3 className="section-title-modern">
          <span className="title-icon">üí≥</span>
          –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç
        </h3>
        <div className="filter-controls-modern">
          <input
            type="month"
            value={filterDate}
            onChange={(e) => setFilterDate(e.target.value)}
            className="form-input-modern"
            placeholder="–§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É"
          />
        </div>
      </div>
      <div className="payments-list-modern">
        {filteredPayments.map((p, index) => (
          <div key={index} className="payment-item-modern">
            <div className="payment-info">
              <div className="payment-date-modern">{p.date}</div>
              <div className="payment-amount-modern">{p.amount} ‚ÇΩ</div>
            </div>
            <div className={`payment-status-modern ${p.status.toLowerCase().replace(/\s+/g, '-')}`}>
              <span className="status-dot"></span>
              {p.status}
            </div>
          </div>
        ))}
      </div>
      <button onClick={handlePayment} className="payment-button-modern">
        <span className="button-icon">üí≥</span>
        –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω
      </button>
    </section>
  );
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const Notifications = ({ notifications }) => (
  <section className="dashboard-section-modern notifications-section-modern">
    <div className="section-header-modern">
      <h3 className="section-title-modern">
        <span className="title-icon">üîî</span>
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        <span className="notification-count">{notifications.length}</span>
      </h3>
    </div>
    <div className="notifications-list-modern">
      {notifications.map((n, index) => (
        <div key={index} className="notification-item-modern">
          <div className="notification-icon-modern">üîî</div>
          <div className="notification-content">
            <div className="notification-text-modern">{n}</div>
            <div className="notification-time-modern">2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥</div>
          </div>
          <button className="notification-close">√ó</button>
        </div>
      ))}
    </div>
  </section>
);

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
const Recommendations = () => (
  <section className="dashboard-section-modern recommendations-section-modern">
    <div className="section-header-modern">
      <h3 className="section-title-modern">
        <span className="title-icon">üí°</span>
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏
      </h3>
    </div>
    <div className="recommendations-grid-modern">
      <div className="recommendation-card-modern">
        <div className="recommendation-icon-modern">üí°</div>
        <div className="recommendation-content">
          <h4 className="recommendation-title">–í—ã–∫–ª—é—á–∏—Ç–µ –ª–∏—à–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h4>
          <p className="recommendation-description">–í —á–∞—Å—ã –ø–∏–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ 10-15% —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏</p>
          <div className="recommendation-impact">
            <span className="impact-label">–≠–∫–æ–Ω–æ–º–∏—è:</span>
            <span className="impact-value">10-15%</span>
          </div>
        </div>
      </div>
      <div className="recommendation-card-modern">
        <div className="recommendation-icon-modern">üå°Ô∏è</div>
        <div className="recommendation-content">
          <h4 className="recommendation-title">–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É</h4>
          <p className="recommendation-description">–°–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 1¬∞C —ç–∫–æ–Ω–æ–º–∏—Ç 5-7% —ç–Ω–µ—Ä–≥–∏–∏</p>
          <div className="recommendation-impact">
            <span className="impact-label">–≠–∫–æ–Ω–æ–º–∏—è:</span>
            <span className="impact-value">5-7%</span>
          </div>
        </div>
      </div>
      <div className="recommendation-card-modern">
        <div className="recommendation-icon-modern">‚ö°</div>
        <div className="recommendation-content">
          <h4 className="recommendation-title">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã</h4>
          <p className="recommendation-description">LED –ª–∞–º–ø—ã –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –Ω–∞ 80% –º–µ–Ω—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏</p>
          <div className="recommendation-impact">
            <span className="impact-label">–≠–∫–æ–Ω–æ–º–∏—è:</span>
            <span className="impact-value">80%</span>
          </div>
        </div>
      </div>
    </div>
  </section>
);

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
const Documents = ({ documents }) => (
  <section className="dashboard-section-modern documents-section-modern">
    <div className="section-header-modern">
      <h3 className="section-title-modern">
        <span className="title-icon">üìÑ</span>
        –õ–∏—á–Ω—ã–π –∞—Ä—Ö–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      </h3>
    </div>
    <div className="documents-grid-modern">
      {documents.map(d => (
        <div key={d.id} className="document-card-modern">
          <div className="document-icon-modern">üìÑ</div>
          <div className="document-info-modern">
            <h4 className="document-name">{d.name}</h4>
            <p className="document-type">–¢–∏–ø: {d.type}</p>
            <p className="document-date">–û–±–Ω–æ–≤–ª–µ–Ω: 2 –¥–Ω—è –Ω–∞–∑–∞–¥</p>
          </div>
          <button className="document-download-modern">
            <span className="download-icon">‚¨á</span>
            –°–∫–∞—á–∞—Ç—å
          </button>
        </div>
      ))}
    </div>
  </section>
);

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserApplications = ({ applications, user }) => {
  const userApplications = applications.filter(app => app.userId === user.id);
  
  return (
    <section className="dashboard-section-modern applications-section-modern">
      <div className="section-header-modern">
        <h3 className="section-title-modern">
          <span className="title-icon">üìã</span>
          –ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        </h3>
      </div>
      {userApplications.length === 0 ? (
        <div className="empty-state-modern">
          <div className="empty-icon-modern">üìã</div>
          <h4 className="empty-title">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫</h4>
          <p className="empty-description">–ü–æ–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</p>
          <Link to="/application" className="form-submit-modern">
            <span className="button-icon">‚ûï</span>
            –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
          </Link>
        </div>
      ) : (
        <div className="applications-list-modern">
          {userApplications.map(app => (
            <div key={app.id} className="application-item-modern">
              <div className="app-header-modern">
                <h4 className="app-title">{app.counterpartyName || app.applicant || `–ó–∞—è–≤–∫–∞ ‚Ññ${app.id}`}</h4>
                <span className={`status-badge-modern ${(app.status || '').toLowerCase().replace(/\s+/g, '-')}`}>
                  {app.status || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
                </span>
              </div>
              <div className="app-details-modern">
                <div className="detail-item">
                  <span className="detail-label">–û–±—ä–µ–∫—Ç:</span>
                  <span className="detail-value">{app.object || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ú–æ—â–Ω–æ—Å—Ç—å:</span>
                  <span className="detail-value">{app.power || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –∫–í—Ç</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</span>
                  <span className="detail-value">{app.voltage || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–í</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</span>
                  <span className="detail-value">
                    {app.submittedAt ? new Date(app.submittedAt).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </section>
  );
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏
const RatingForm = ({ rating, setRating, comment, setComment, handleRatingSubmit }) => (
  <section className="dashboard-section-modern rating-section-modern">
    <div className="section-header-modern">
      <h3 className="section-title-modern">
        <span className="title-icon">‚≠ê</span>
        –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
      </h3>
    </div>
    <form onSubmit={handleRatingSubmit} className="rating-form-modern">
      <div className="rating-stars-modern">
        {[1, 2, 3, 4, 5].map(star => (
          <button
            key={star}
            type="button"
            className={`star-modern ${rating >= star ? 'active' : ''}`}
            onClick={() => setRating(star)}
          >
            ‚≠ê
          </button>
        ))}
      </div>
      <div className="rating-labels">
        <span className="rating-label">–ü–ª–æ—Ö–æ</span>
        <span className="rating-label">–û—Ç–ª–∏—á–Ω–æ</span>
      </div>
      <input
        type="text"
        value={comment}
        onChange={(e) => setComment(e.target.value)}
        placeholder="–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
        className="form-input-modern"
      />
      <button type="submit" className="form-submit-modern">
        <span className="button-icon">üì§</span>
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
      </button>
    </form>
  </section>
);

const Dashboard = () => {
  const { user, isAuthenticated } = useSelector(state => state.auth);
  const { applications } = useSelector(state => state.application);
  const navigate = useNavigate();

  const [filterDate, setFilterDate] = useState('');
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');
  const [activeSection, setActiveSection] = useState('overview');
  const [realTimeReading, setRealTimeReading] = useState(1250.75);
  const [consumption, setConsumption] = useState([
    { date: '2024-01', value: 1200 },
    { date: '2024-02', value: 1350 },
    { date: '2024-03', value: 1100 },
    { date: '2024-04', value: 1400 },
    { date: '2024-05', value: 1250 },
    { date: '2024-06', value: 1300 },
  ]);

  // –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∞
  useEffect(() => {
    const interval = setInterval(() => {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      const hour = new Date().getHours();
      const baseChange = (hour >= 8 && hour <= 20) ? 1 : -1;
      const randomChange = (Math.random() * 5 - 2.5);
      setRealTimeReading(prev => Math.max(1000, prev + baseChange + randomChange));

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
      setConsumption(prev => {
        const newConsumption = [...prev];
        const lastValue = newConsumption[newConsumption.length - 1];
        const newValue = lastValue.value + (Math.random() * 100 - 50);
        newConsumption[newConsumption.length - 1] = {
          ...lastValue,
          value: Math.max(800, Math.min(2000, newValue))
        };
        return newConsumption;
      });
    }, 3000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

    return () => clearInterval(interval);
  }, []);

  const compareData = {
    current: realTimeReading,
    previous: 1180.50
  };

  const paymentHistory = [
    { date: '2024-01-15', amount: 2500, status: '–û–ø–ª–∞—á–µ–Ω–æ' },
    { date: '2024-02-15', amount: 2800, status: '–û–ø–ª–∞—á–µ–Ω–æ' },
    { date: '2024-03-15', amount: 2200, status: '–û–ø–ª–∞—á–µ–Ω–æ' },
    { date: '2024-04-15', amount: 3000, status: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ' },
  ];

  const notifications = [
    '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏',
    '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ —Å 1 –º–∞—è',
    '–ü–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ 15 –º–∞—è',
  ];

  const documents = [
    { id: 1, name: '–î–æ–≥–æ–≤–æ—Ä —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è', type: 'PDF' },
    { id: 2, name: '–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç', type: 'PDF' },
    { id: 3, name: '–°—á–µ—Ç –∑–∞ –º–∞—Ä—Ç 2024', type: 'PDF' },
  ];

  const handleSubmitApplication = () => {
    navigate('/application');
  };

  const handlePayment = () => {
    alert('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ...');
  };

  const handleRatingSubmit = (e) => {
    e.preventDefault();
    alert(`–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: ${rating} –∑–≤–µ–∑–¥!`);
    setRating(0);
    setComment('');
  };

  const renderSection = () => {
    if (!isAuthenticated) {
      return (
        <div className="dashboard-section">
          <h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ–º</h3>
          <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.</p>
          <button onClick={() => navigate('/login')} className="form-submit">
            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </button>
        </div>
      );
    }

    if (user.role === 'applicant') {
      switch (activeSection) {
        case 'overview':
          return (
            <div className="overview-grid">
              <UserPanel user={user} />
              <div className="chart-section">
                <ConsumptionChart consumption={consumption} realTimeReading={realTimeReading} />
              </div>
              <div className="meter-section">
                <MeterReading realTimeReading={realTimeReading} compareData={compareData} />
              </div>
            </div>
          );
        case 'applications':
          return <UserApplications applications={applications} user={user} />;
        case 'payments':
          return (
            <PaymentHistory 
              paymentHistory={paymentHistory} 
              filterDate={filterDate} 
              setFilterDate={setFilterDate} 
              handlePayment={handlePayment} 
            />
          );
        case 'notifications':
          return <Notifications notifications={notifications} />;
        case 'documents':
          return <Documents documents={documents} />;
        case 'recommendations':
          return <Recommendations />;
        case 'rating':
          return (
            <RatingForm 
              rating={rating} 
              setRating={setRating} 
              comment={comment} 
              setComment={setComment} 
              handleRatingSubmit={handleRatingSubmit} 
            />
          );
        default:
          return (
            <div className="overview-grid">
              <UserPanel user={user} />
              <div className="chart-section">
                <ConsumptionChart consumption={consumption} realTimeReading={realTimeReading} />
              </div>
              <div className="meter-section">
                <MeterReading realTimeReading={realTimeReading} compareData={compareData} />
              </div>
            </div>
          );
      }
    }

    if (user.role === 'employee') {
      return (
        <div className="dashboard-section">
          <h3>–ü–∞–Ω–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</h3>
          <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.</p>
          <button onClick={() => navigate('/employee-panel')} className="form-submit">
            –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–∞–Ω–µ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
          </button>
        </div>
      );
    }

    return (
      <div className="dashboard-section">
        <h3>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
        <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.</p>
      </div>
    );
  };

  if (!isAuthenticated) {
    return (
      <div className="dashboard">
        <div className="dashboard-header">
          <h1>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ–º</h1>
        </div>
        <div className="dashboard-container">
          <div className="dashboard-main">
            {renderSection()}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <h1>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
        <div className="user-info">
          <div className="user-avatar">
            {user.name ? user.name.charAt(0).toUpperCase() : 'U'}
          </div>
          <div className="user-details">
            <h3>{user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
            <p>–†–æ–ª—å: {user.role === 'applicant' ? '–ó–∞—è–≤–∏—Ç–µ–ª—å' : user.role}</p>
            {user.organization && <p>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user.organization}</p>}
          </div>
        </div>
      </div>
      <div className="dashboard-container">
        <aside className="dashboard-sidebar">
          <div className="sidebar-menu">
            <h3 className="sidebar-title">–ú–µ–Ω—é</h3>
            <nav className="sidebar-nav">
              {isAuthenticated && user.role === 'applicant' && (
                <>
                <button 
                  onClick={() => setActiveSection('overview')} 
                  className={`sidebar-link ${activeSection === 'overview' ? 'active' : ''}`}
                >
                  <span className="material-icons">dashboard</span>
                  <span>–û–±–∑–æ—Ä</span>
                </button>
                <button 
                  onClick={() => setActiveSection('applications')} 
                  className={`sidebar-link ${activeSection === 'applications' ? 'active' : ''}`}
                >
                  <span className="material-icons">description</span>
                  <span>–ú–æ–∏ –∑–∞—è–≤–∫–∏</span>
                </button>
                <button 
                  onClick={() => setActiveSection('payments')} 
                  className={`sidebar-link ${activeSection === 'payments' ? 'active' : ''}`}
                >
                  <span className="material-icons">payment</span>
                  <span>–û–ø–ª–∞—Ç—ã</span>
                </button>
                <button 
                  onClick={() => setActiveSection('notifications')} 
                  className={`sidebar-link ${activeSection === 'notifications' ? 'active' : ''}`}
                >
                  <span className="material-icons">notifications</span>
                  <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                </button>
                <button 
                  onClick={() => setActiveSection('documents')} 
                  className={`sidebar-link ${activeSection === 'documents' ? 'active' : ''}`}
                >
                  <span className="material-icons">folder</span>
                  <span>–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
                </button>
                <button 
                  onClick={() => setActiveSection('recommendations')} 
                  className={`sidebar-link ${activeSection === 'recommendations' ? 'active' : ''}`}
                >
                  <span className="material-icons">lightbulb</span>
                  <span>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
                </button>
                <button 
                  onClick={() => setActiveSection('rating')} 
                  className={`sidebar-link ${activeSection === 'rating' ? 'active' : ''}`}
                >
                  <span className="material-icons">star</span>
                  <span>–û—Ü–µ–Ω–∫–∞</span>
                </button>
                <Link to="/application" className="sidebar-link">
                  <span className="material-icons">add_circle</span>
                  <span>–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</span>
                </Link>
                </>
              )}
              {isAuthenticated && user.role === 'employee' && (
                <Link to="/employee-panel" className="sidebar-link active">
                  <span className="material-icons">admin_panel_settings</span>
                  <span>–ü–∞–Ω–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</span>
                </Link>
              )}
              <button onClick={() => navigate('/')} className="sidebar-link logout-btn">
                <span className="material-icons">logout</span>
                <span>–í—ã—Ö–æ–¥</span>
              </button>
            </nav>
          </div>
        </aside>
        <main className="dashboard-main">
          {renderSection()}
        </main>
      </div>
    </div>
  );
};

export default Dashboard;