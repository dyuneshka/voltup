import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { verifyApplication } from '../redux/slices/applicationSlice';
import '../styles/employee-panel.scss';

const EmployeePanel = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { user } = useSelector(state => state.auth);
  const { applications } = useSelector(state => state.application);

  const [selectedAppId, setSelectedAppId] = useState(null);
  const [reviewMode, setReviewMode] = useState(false);
  const [localApps, setLocalApps] = useState([]);
  const [activeTab, setActiveTab] = useState('stages');
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showDashboard, setShowDashboard] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const [wizardStep, setWizardStep] = useState(1); // 1-—ç—Ç–∞–ø—ã, 2-–ê–°–°–û, 3-–æ–±—ä–µ–∫—Ç, 4-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö, 5-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const [wizardAppId, setWizardAppId] = useState(null);
  const [stepValidation, setStepValidation] = useState({
    stages: false,
    asso: false,
    object: false
  });

  // –≠–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
  const [dashboardData] = useState({
    stats: {
      totalApplications: 156,
      pendingReview: 23,
      inProgress: 45,
      completedToday: 8,
      averageProcessingTime: 12.5
    },
    notifications: [
      { id: 1, type: 'urgent', message: '–°—Ä–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è', time: '5 –º–∏–Ω –Ω–∞–∑–∞–¥' },
      { id: 2, type: 'info', message: '–ù–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã', time: '15 –º–∏–Ω –Ω–∞–∑–∞–¥' },
      { id: 3, type: 'success', message: '–û–¢–† –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ', time: '1 —á–∞—Å –Ω–∞–∑–∞–¥' },
      { id: 4, type: 'warning', message: '–ò—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏ ‚Ññ45', time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥' }
    ],
    recentActivity: [
      { id: 1, action: '–°–æ–∑–¥–∞–Ω –û–¢–†', applicant: '–û–û–û "–≠–Ω–µ—Ä–≥–æ–°—Ç—Ä–æ–π"', time: '10:30' },
      { id: 2, action: '–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∑–∞—è–≤–∫–∞', applicant: '–ò–ü –ò–≤–∞–Ω–æ–≤', time: '09:15' },
      { id: 3, action: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¢–£', applicant: '–ó–ê–û "–ú–µ—Ç–∞–ª–ª–°–µ—Ä–≤–∏—Å"', time: '08:45' },
      { id: 4, action: '–ü—Ä–∏–Ω—è—Ç–∞ –∑–∞—è–≤–∫–∞', applicant: '–û–û–û "–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç"', time: '08:20' }
    ],
    tasks: [
      { id: 1, title: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É ‚Ññ156', priority: 'high', deadline: '–°–µ–≥–æ–¥–Ω—è 18:00' },
      { id: 2, title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –û–¢–† –¥–ª—è –û–û–û "–≠–Ω–µ—Ä–≥–æ–°—Ç—Ä–æ–π"', priority: 'medium', deadline: '–ó–∞–≤—Ç—Ä–∞ 12:00' },
      { id: 3, title: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –¢–£ —Å –†–≠–°', priority: 'low', deadline: '–ß–µ—Ç–≤–µ—Ä–≥ 15:00' }
    ],
    performance: {
      daily: 85,
      weekly: 92,
      monthly: 88
    }
  });

  const networkStructureCatalog = [
    { id: 1, chain: ['–¢–æ—á–∫–∞ 1', '–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏—è A', '–õ–≠–ü 10 –∫–í'] },
    { id: 2, chain: ['–¢–æ—á–∫–∞ 2', '–ü–æ–¥—Å—Ç–∞–Ω—Ü–∏—è B', '–õ–≠–ü 20 –∫–í'] },
  ];

  useEffect(() => {
    // –ï—Å–ª–∏ –≤ Redux –Ω–µ—Ç –∑–∞—è–≤–æ–∫, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (applications && applications.length === 0) {
      const mockApplications = Array.from({ length: 10 }, (_, index) => ({
        id: index + 1,
        applicant: `–ö–æ–º–ø–∞–Ω–∏—è ${index + 1}`,
        power: '',
        stages: [],
        designDeadline: '',
        operationDeadline: '',
        assoData: {
          applicantType: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ',
          requestType: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞',
          submissionMethod: '–û–Ω–ª–∞–π–Ω',
          requestTypeAso: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
          connectionType: '–ù–æ–≤–∞—è —Ç–æ—á–∫–∞',
          loadNature: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è',
          notificationMethod: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞',
          documentDelivery: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ',
        },
        objectData: {
          energyDevice: '',
          yearOfOperation: '',
          objectType: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç',
          locationType: '–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å',
          cadastralNumber: '',
        },
        status: '–ó–∞–ø–æ–ª–Ω–µ–Ω–∞',
        files: [`doc${index + 1}.pdf`, `photo${index + 1}.jpg`],
        otr: null,
      }));
      mockApplications.forEach(app => dispatch(verifyApplication(app)));
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Redux
    setLocalApps(applications || []);
  }, [applications, dispatch]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫
  const filteredApplications = (localApps || []).filter(app => {
    const matchesStatus = filterStatus === 'all' || app.status === filterStatus;
    const matchesSearch = (app.applicant || '').toLowerCase().includes(searchTerm.toLowerCase());
    return matchesStatus && matchesSearch;
  });

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞
  const DashboardView = () => (
    <div className="dashboard-view">
      <div className="dashboard-header">
        <h2>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</h2>
        <div className="user-welcome">
          <span className="welcome-text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.name || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'}!</span>
          <span className="current-time">{new Date().toLocaleString('ru-RU')}</span>
        </div>
      </div>

      <div className="dashboard-grid">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="stats-section">
          <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-icon">üìã</div>
              <div className="stat-content">
                <span className="stat-number">{dashboardData.stats.totalApplications}</span>
                <span className="stat-label">–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫</span>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon">‚è≥</div>
              <div className="stat-content">
                <span className="stat-number">{dashboardData.stats.pendingReview}</span>
                <span className="stat-label">–û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</span>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon">üîÑ</div>
              <div className="stat-content">
                <span className="stat-number">{dashboardData.stats.inProgress}</span>
                <span className="stat-label">–í —Ä–∞–±–æ—Ç–µ</span>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon">‚úÖ</div>
              <div className="stat-content">
                <span className="stat-number">{dashboardData.stats.completedToday}</span>
                <span className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è</span>
              </div>
            </div>
          </div>
        </div>

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        <div className="notifications-section">
          <h3>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
          <div className="notifications-list">
            {dashboardData.notifications.map(notification => (
              <div key={notification.id} className={`notification-item ${notification.type}`}>
                <div className="notification-icon">
                  {notification.type === 'urgent' && 'üö®'}
                  {notification.type === 'info' && '‚ÑπÔ∏è'}
                  {notification.type === 'success' && '‚úÖ'}
                  {notification.type === 'warning' && '‚ö†Ô∏è'}
                </div>
                <div className="notification-content">
                  <span className="notification-message">{notification.message}</span>
                  <span className="notification-time">{notification.time}</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
        <div className="tasks-section">
          <h3>üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</h3>
          <div className="tasks-list">
            {dashboardData.tasks.map(task => (
              <div key={task.id} className={`task-item ${task.priority}`}>
                <div className="task-content">
                  <span className="task-title">{task.title}</span>
                  <span className="task-deadline">‚è∞ {task.deadline}</span>
                </div>
                <div className={`priority-badge ${task.priority}`}>
                  {task.priority === 'high' && '–í—ã—Å–æ–∫–∏–π'}
                  {task.priority === 'medium' && '–°—Ä–µ–¥–Ω–∏–π'}
                  {task.priority === 'low' && '–ù–∏–∑–∫–∏–π'}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å */}
        <div className="performance-section">
          <h3>üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
          <div className="performance-grid">
            <div className="performance-item">
              <span className="performance-label">–î–Ω–µ–≤–Ω–∞—è</span>
              <span className="performance-value">{dashboardData.performance.daily}%</span>
            </div>
            <div className="performance-item">
              <span className="performance-label">–ù–µ–¥–µ–ª—å–Ω–∞—è</span>
              <span className="performance-value">{dashboardData.performance.weekly}%</span>
            </div>
            <div className="performance-item">
              <span className="performance-label">–ú–µ—Å—è—á–Ω–∞—è</span>
              <span className="performance-value">{dashboardData.performance.monthly}%</span>
            </div>
          </div>
        </div>

        {/* –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
        <div className="activity-section">
          <h3>üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
          <div className="activity-list">
            {dashboardData.recentActivity.map(activity => (
              <div key={activity.id} className="activity-item">
                <div className="activity-icon">üìù</div>
                <div className="activity-content">
                  <span className="activity-action">{activity.action}</span>
                  <span className="activity-applicant">{activity.applicant}</span>
                </div>
                <span className="activity-time">{activity.time}</span>
              </div>
            ))}
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="quick-actions-section">
          <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
          <div className="quick-actions-grid">
            <button className="quick-action-btn" onClick={() => setShowDashboard(false)}>
              <span className="action-icon">üìã</span>
              <span className="action-text">–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫</span>
            </button>
            <button className="quick-action-btn">
              <span className="action-icon">‚ûï</span>
              <span className="action-text">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</span>
            </button>
            <button className="quick-action-btn">
              <span className="action-icon">üìä</span>
              <span className="action-text">–û—Ç—á–µ—Ç—ã</span>
            </button>
            <button className="quick-action-btn">
              <span className="action-icon">‚öôÔ∏è</span>
              <span className="action-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const handleFillStages = (appId) => {
    const app = localApps.find(a => a.id === appId);
    if (!app.power || isNaN(app.power) || app.power <= 0) {
      alert('–ú–æ—â–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!');
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–∞–ø–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ—â–Ω–æ—Å—Ç–∏
    const power = parseFloat(app.power);
    let technicalExaminationDays = 30;
    let coordinationDays = 45;
    
    if (power > 150) {
      technicalExaminationDays = 45;
      coordinationDays = 60;
    } else if (power > 100) {
      technicalExaminationDays = 35;
      coordinationDays = 50;
    }
    
    const newStages = [
      { 
        id: 1, 
        name: '–°–±–æ—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', 
        duration: '30 –¥–Ω–µ–π',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        status: 'pending'
      },
      { 
        id: 2, 
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞', 
        duration: `${technicalExaminationDays} –¥–Ω–µ–π`,
        description: `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–º–æ—â–Ω–æ—Å—Ç—å: ${app.power} –∫–í—Ç)`,
        status: 'pending'
      },
      { 
        id: 3, 
        name: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π', 
        duration: `${coordinationDays} –¥–Ω–µ–π`,
        description: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¢–£ —Å –∑–∞—è–≤–∏—Ç–µ–ª–µ–º –∏ —Å–º–µ–∂–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏',
        status: 'pending'
      },
      { 
        id: 4, 
        name: '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 
        duration: app.designDeadline ? `${app.designDeadline} –¥–Ω–µ–π` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
        status: 'pending'
      },
      { 
        id: 5, 
        name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', 
        duration: '90 –¥–Ω–µ–π',
        description: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω—ã—Ö —Ä–∞–±–æ—Ç',
        status: 'pending'
      },
      { 
        id: 6, 
        name: '–í–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é', 
        duration: app.operationDeadline ? `${app.operationDeadline} –¥–Ω–µ–π` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        description: '–ü—Ä–∏–µ–º–∫–∞ —Ä–∞–±–æ—Ç –∏ –≤–≤–æ–¥ –æ–±—ä–µ–∫—Ç–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é',
        status: 'pending'
      },
    ];
    
    updateApp(appId, { stages: newStages });
    alert('–≠—Ç–∞–ø—ã –¢–ü —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏!');
  };

  const handlePowerChange = (appId, value) => {
    if (value < 0) {
      alert('–ú–æ—â–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!');
      return;
    }
    updateApp(appId, { power: value });
  };

  const handleDesignDeadlineChange = (appId, value) => {
    updateApp(appId, { designDeadline: value });
  };

  const handleOperationDeadlineChange = (appId, value) => {
    updateApp(appId, { operationDeadline: value });
  };

  const handleAssoChange = (appId, e) => {
    const app = localApps.find(a => a.id === appId);
    if (app && app.assoData) {
      updateApp(appId, { assoData: { ...app.assoData, [e.target.name]: e.target.value } });
    }
  };

  const handleObjectChange = (appId, e) => {
    const app = localApps.find(a => a.id === appId);
    if (app && app.objectData) {
      updateApp(appId, { objectData: { ...app.objectData, [e.target.name]: e.target.value } });
    }
  };

  const handleSubmitForReview = (appId) => {
    const app = localApps.find(a => a.id === appId);
    if (!app.power || !app.stages || !app.stages.length || !app.assoData || !app.objectData.energyDevice) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å, —ç—Ç–∞–ø—ã, –¥–∞–Ω–Ω—ã–µ –ê–°–°–û –∏ —ç–Ω–µ—Ä–≥–æ–ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!');
      return;
    }
    updateApp(appId, { status: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' });
    setReviewMode(true);
  };

  const handleAcceptTask = (appId) => {
    updateApp(appId, { status: '–ü—Ä–∏–Ω—è—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é' });
    setReviewMode(false);
    dispatch(verifyApplication({ id: appId, status: '–ü—Ä–∏–Ω—è—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é' }));
  };

  const handleCreateOtr = (appId) => {
    updateApp(appId, { status: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –û–¢–†' });
    setSelectedAppId(appId);
  };

  const handleFillNetworkStructure = (appId, structureId) => {
    const selectedStructure = networkStructureCatalog.find(s => s.id === structureId)?.chain || [];
    const app = localApps.find(a => a.id === appId);
    if (app) {
      updateApp(appId, { otr: { ...app.otr, networkStructure: selectedStructure } });
    }
  };

  const handleAddSoActivity = (appId) => {
    const app = localApps.find(a => a.id === appId);
    if (app) {
      updateApp(appId, {
        otr: {
          ...app.otr,
          soActivities: [
            ...(app.otr?.soActivities || []),
            { id: (app.otr?.soActivities?.length || 0) + 1, section: '', voltage: '', length: '' },
          ],
        },
      });
    }
  };

  const handleUpdateSoActivity = (appId, idx, field, value) => {
    const app = localApps.find(a => a.id === appId);
    if (app && app.otr && app.otr.soActivities) {
      const newActivities = app.otr.soActivities.map((act, i) =>
        i === idx ? { ...act, [field]: value } : act
      );
      updateApp(appId, { otr: { ...app.otr, soActivities: newActivities } });
    }
  };

  const handleAddApplicantActivity = (appId) => {
    const app = localApps.find(a => a.id === appId);
    if (app) {
      updateApp(appId, {
        otr: {
          ...app.otr,
          applicantActivities: [
            ...(app.otr?.applicantActivities || []),
            { id: (app.otr?.applicantActivities?.length || 0) + 1, section: '' },
          ],
        },
      });
    }
  };

  const handleUpdateApplicantActivity = (appId, idx, value) => {
    const app = localApps.find(a => a.id === appId);
    if (app && app.otr && app.otr.applicantActivities) {
      const newActivities = app.otr.applicantActivities.map((act, i) =>
        i === idx ? { ...act, section: value } : act
      );
      updateApp(appId, { otr: { ...app.otr, applicantActivities: newActivities } });
    }
  };

  const handleAddSignatory = (appId) => {
    const app = localApps.find(a => a.id === appId);
    if (app) {
      updateApp(appId, {
        otr: {
          ...app.otr,
          signatories: [
            ...(app.otr?.signatories || []),
            { id: (app.otr?.signatories?.length || 0) + 1, name: '', position: '' },
          ],
        },
      });
    }
  };

  const handleUpdateSignatory = (appId, idx, field, value) => {
    const app = localApps.find(a => a.id === appId);
    if (app && app.otr && app.otr.signatories) {
      const newSignatories = app.otr.signatories.map((sign, i) =>
        i === idx ? { ...sign, [field]: value } : sign
      );
      updateApp(appId, { otr: { ...app.otr, signatories: newSignatories } });
    }
  };

  const handleSaveOtr = (appId) => {
    const app = localApps.find(a => a.id === appId);
    if (!app.otr?.tariffType || !app.otr?.distance || !app.otr?.networkStructure?.length) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–∏–ø —Ç–∞—Ä–∏—Ñ–∞, —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏!');
      return;
    }
    const updatedOtr = { ...app.otr, status: '–ì–æ—Ç–æ–≤–æ' };
    updateApp(appId, { status: '–û–¢–† –≥–æ—Ç–æ–≤–æ', otr: updatedOtr });
    dispatch(verifyApplication({ id: appId, status: '–û–¢–† –≥–æ—Ç–æ–≤–æ', otr: updatedOtr }));
  };

  const updateApp = (appId, updates) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Redux
    dispatch(verifyApplication({ id: appId, ...updates }));
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const updatedApps = localApps.map(a => a.id === appId ? { ...a, ...updates } : a);
    setLocalApps(updatedApps);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const validateStagesStep = (app) => {
    return app.power && 
           app.power > 0 && 
           app.stages && 
           app.stages.length > 0 &&
           app.designDeadline &&
           app.operationDeadline;
  };

  const validateAssoStep = (app) => {
    return app.assoData &&
           app.assoData.applicantType &&
           app.assoData.requestType &&
           app.assoData.submissionMethod &&
           app.assoData.requestTypeAso &&
           app.assoData.connectionType &&
           app.assoData.loadNature &&
           app.assoData.notificationMethod &&
           app.assoData.documentDelivery;
  };

  const validateObjectStep = (app) => {
    return app.objectData &&
           app.objectData.energyDevice &&
           app.objectData.yearOfOperation &&
           app.objectData.objectType &&
           app.objectData.locationType &&
           app.objectData.cadastralNumber;
  };

  const validateCurrentStep = () => {
    if (!wizardAppId) return false;
    const app = localApps.find(a => a.id === wizardAppId);
    if (!app) return false;

    switch (wizardStep) {
      case 1: return validateStagesStep(app);
      case 2: return validateAssoStep(app);
      case 3: return validateObjectStep(app);
      default: return false;
    }
  };

  const goToNextStep = () => {
    if (validateCurrentStep()) {
      setWizardStep(prev => prev + 1);
      setStepValidation(prev => ({
        ...prev,
        [wizardStep === 1 ? 'stages' : wizardStep === 2 ? 'asso' : 'object']: true
      }));
    }
  };

  const goToPreviousStep = () => {
    setWizardStep(prev => Math.max(1, prev - 1));
  };

  const startWizard = (appId) => {
    setWizardAppId(appId);
    setWizardStep(1);
    setStepValidation({ stages: false, asso: false, object: false });
  };

  const finishWizard = () => {
    if (wizardAppId) {
      updateApp(wizardAppId, { status: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' });
      setWizardAppId(null);
      setWizardStep(1);
      setStepValidation({ stages: false, asso: false, object: false });
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Wizard –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const renderWizard = () => {
    if (!wizardAppId) return null;
    
    const app = localApps.find(a => a.id === wizardAppId);
    if (!app) return null;

    const getStepTitle = () => {
      switch (wizardStep) {
        case 1: return '–®–∞–≥ 1: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –¢–ü';
        case 2: return '–®–∞–≥ 2: –î–∞–Ω–Ω—ã–µ –ê–°–°–û';
        case 3: return '–®–∞–≥ 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ';
        case 4: return '–®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö';
        case 5: return '–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤';
        default: return '';
      }
    };

    const getStepDescription = () => {
      switch (wizardStep) {
        case 1: return '–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∞–ø—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        case 2: return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—è–≤–∫–µ (–¥–∞–Ω–Ω—ã–µ –ê–°–°–û)';
        case 3: return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–±—ä–µ–∫—Ç—É –¢–ü';
        case 4: return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏';
        case 5: return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É';
        default: return '';
      }
    };

    return (
      <div className="wizard-overlay">
        <div className="wizard-container">
          <div className="wizard-header">
            <h2>{getStepTitle()}</h2>
            <p>{getStepDescription()}</p>
            <div className="wizard-progress">
              <div className={`progress-step ${wizardStep >= 1 ? 'active' : ''}`}>1</div>
              <div className={`progress-line ${wizardStep >= 2 ? 'active' : ''}`}></div>
              <div className={`progress-step ${wizardStep >= 2 ? 'active' : ''}`}>2</div>
              <div className={`progress-line ${wizardStep >= 3 ? 'active' : ''}`}></div>
              <div className={`progress-step ${wizardStep >= 3 ? 'active' : ''}`}>3</div>
              <div className={`progress-line ${wizardStep >= 4 ? 'active' : ''}`}></div>
              <div className={`progress-step ${wizardStep >= 4 ? 'active' : ''}`}>4</div>
              <div className={`progress-line ${wizardStep >= 5 ? 'active' : ''}`}></div>
              <div className={`progress-step ${wizardStep >= 5 ? 'active' : ''}`}>5</div>
            </div>
          </div>

          <div className="wizard-content">
            {wizardStep === 1 && (
              <div className="wizard-step">
                <h3>–≠—Ç–∞–ø—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</h3>
                <div className="form-group">
                  <label>–ú–æ—â–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ (–∫–í—Ç):</label>
                  <input
                    type="number"
                    value={app.power || ''}
                    onChange={(e) => handlePowerChange(app.id, e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å"
                  />
                </div>
                <button 
                  onClick={() => handleFillStages(app.id)}
                  disabled={!app.power || app.power <= 0}
                  className="btn-fill-stages"
                >
                  –ó–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∞–ø—ã
                </button>
                
                {app.stages && app.stages.length > 0 && (
                  <div className="stages-section">
                    <h4>–≠—Ç–∞–ø—ã –¢–ü:</h4>
                    {app.stages.map(stage => (
                      <div key={stage.id} className="stage-item">
                        <span>{stage.name}</span>
                        <span>{stage.duration}</span>
                      </div>
                    ))}
                    
                    <div className="manual-deadlines">
                      <div className="form-group">
                        <label>–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–Ω–µ–π):</label>
                        <input
                          type="number"
                          value={app.designDeadline || ''}
                          onChange={(e) => handleDesignDeadlineChange(app.id, e.target.value)}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫"
                        />
                      </div>
                      <div className="form-group">
                        <label>–°—Ä–æ–∫ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é (–¥–Ω–µ–π):</label>
                        <input
                          type="number"
                          value={app.operationDeadline || ''}
                          onChange={(e) => handleOperationDeadlineChange(app.id, e.target.value)}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫"
                        />
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {wizardStep === 2 && (
              <div className="wizard-step">
                <h3>–î–∞–Ω–Ω—ã–µ –ê–°–°–û</h3>
                <div className="form-grid">
                  <div className="form-group">
                    <label>–¢–∏–ø –∑–∞—è–≤–∏—Ç–µ–ª—è:</label>
                    <select
                      name="applicantType"
                      value={app.assoData?.applicantType || ''}
                      onChange={(e) => handleAssoChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                      <option value="–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ">–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ</option>
                      <option value="–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ">–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–¢–∏–ø —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:</label>
                    <select
                      name="requestType"
                      value={app.assoData?.requestType || ''}
                      onChange={(e) => handleAssoChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                      <option value="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞</option>
                      <option value="–ë—É–º–∞–∂–Ω–∞—è –∑–∞—è–≤–∫–∞">–ë—É–º–∞–∂–Ω–∞—è –∑–∞—è–≤–∫–∞</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–°–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:</label>
                    <select
                      name="submissionMethod"
                      value={app.assoData?.submissionMethod || ''}
                      onChange={(e) => handleAssoChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±</option>
                      <option value="–û–Ω–ª–∞–π–Ω">–û–Ω–ª–∞–π–Ω</option>
                      <option value="–õ–∏—á–Ω–æ">–õ–∏—á–Ω–æ</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–í–∏–¥ –∑–∞—è–≤–∫–∏:</label>
                    <select
                      name="requestTypeAso"
                      value={app.assoData?.requestTypeAso || ''}
                      onChange={(e) => handleAssoChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥</option>
                      <option value="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</option>
                      <option value="–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ">–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–¢–∏–ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</label>
                    <select
                      name="connectionType"
                      value={app.assoData?.connectionType || ''}
                      onChange={(e) => handleAssoChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                      <option value="–ù–æ–≤–∞—è —Ç–æ—á–∫–∞">–ù–æ–≤–∞—è —Ç–æ—á–∫–∞</option>
                      <option value="–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–æ—á–∫–∞">–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–æ—á–∫–∞</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–•–∞—Ä–∞–∫—Ç–µ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏:</label>
                    <select
                      name="loadNature"
                      value={app.assoData?.loadNature || ''}
                      onChange={(e) => handleAssoChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä</option>
                      <option value="–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è">–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è</option>
                      <option value="–ë—ã—Ç–æ–≤–∞—è">–ë—ã—Ç–æ–≤–∞—è</option>
                      <option value="–°–º–µ—à–∞–Ω–Ω–∞—è">–°–º–µ—à–∞–Ω–Ω–∞—è</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–°–ø–æ—Å–æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</label>
                    <select
                      name="notificationMethod"
                      value={app.assoData?.notificationMethod || ''}
                      onChange={(e) => handleAssoChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±</option>
                      <option value="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</option>
                      <option value="–°–ú–°">–°–ú–°</option>
                      <option value="–ü–æ—á—Ç–∞">–ü–æ—á—Ç–∞</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</label>
                    <select
                      name="documentDelivery"
                      value={app.assoData?.documentDelivery || ''}
                      onChange={(e) => handleAssoChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±</option>
                      <option value="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ</option>
                      <option value="–õ–∏—á–Ω–æ">–õ–∏—á–Ω–æ</option>
                      <option value="–ü–æ—á—Ç–∞">–ü–æ—á—Ç–∞</option>
                    </select>
                  </div>
                </div>
              </div>
            )}

            {wizardStep === 3 && (
              <div className="wizard-step">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ –¢–ü</h3>
                <div className="form-grid">
                  <div className="form-group">
                    <label>–≠–Ω–µ—Ä–≥–æ–ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</label>
                    <input
                      type="text"
                      name="energyDevice"
                      value={app.objectData?.energyDevice || ''}
                      onChange={(e) => handleObjectChange(app.id, e)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
                    />
                  </div>
                  <div className="form-group">
                    <label>–ì–æ–¥ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é:</label>
                    <input
                      type="number"
                      name="yearOfOperation"
                      value={app.objectData?.yearOfOperation || ''}
                      onChange={(e) => handleObjectChange(app.id, e)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥"
                      min="1900"
                      max="2030"
                    />
                  </div>
                  <div className="form-group">
                    <label>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:</label>
                    <select
                      name="objectType"
                      value={app.objectData?.objectType || ''}
                      onChange={(e) => handleObjectChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                      <option value="–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç">–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç</option>
                      <option value="–ñ–∏–ª–æ–π –æ–±—ä–µ–∫—Ç">–ñ–∏–ª–æ–π –æ–±—ä–µ–∫—Ç</option>
                      <option value="–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç">–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–¢–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏:</label>
                    <select
                      name="locationType"
                      value={app.objectData?.locationType || ''}
                      onChange={(e) => handleObjectChange(app.id, e)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                      <option value="–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å">–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å</option>
                      <option value="–°–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å">–°–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å</option>
                      <option value="–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞">–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∑–æ–Ω–∞</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä:</label>
                    <input
                      type="text"
                      name="cadastralNumber"
                      value={app.objectData?.cadastralNumber || ''}
                      onChange={(e) => handleObjectChange(app.id, e)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä"
                    />
                  </div>
                </div>
              </div>
            )}

            {wizardStep === 4 && (
              <div className="wizard-step">
                <h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
                <div className="review-section">
                  <h4>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h4>
                  
                  <div className="review-item">
                    <h5>–≠—Ç–∞–ø—ã –¢–ü:</h5>
                    <p>–ú–æ—â–Ω–æ—Å—Ç—å: {app.power} –∫–í—Ç</p>
                    <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤: {app.stages?.length || 0}</p>
                    <p>–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {app.designDeadline} –¥–Ω–µ–π</p>
                    <p>–°—Ä–æ–∫ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é: {app.operationDeadline} –¥–Ω–µ–π</p>
                  </div>

                  <div className="review-item">
                    <h5>–î–∞–Ω–Ω—ã–µ –ê–°–°–û:</h5>
                    <p>–¢–∏–ø –∑–∞—è–≤–∏—Ç–µ–ª—è: {app.assoData?.applicantType}</p>
                    <p>–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {app.assoData?.requestType}</p>
                    <p>–í–∏–¥ –∑–∞—è–≤–∫–∏: {app.assoData?.requestTypeAso}</p>
                    <p>–¢–∏–ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {app.assoData?.connectionType}</p>
                  </div>

                  <div className="review-item">
                    <h5>–û–±—ä–µ–∫—Ç –¢–ü:</h5>
                    <p>–≠–Ω–µ—Ä–≥–æ–ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {app.objectData?.energyDevice}</p>
                    <p>–ì–æ–¥ –≤–≤–æ–¥–∞: {app.objectData?.yearOfOperation}</p>
                    <p>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {app.objectData?.objectType}</p>
                    <p>–¢–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: {app.objectData?.locationType}</p>
                    <p>–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {app.objectData?.cadastralNumber}</p>
                  </div>
                </div>
              </div>
            )}

            {wizardStep === 5 && (
              <div className="wizard-step">
                <h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
                <div className="documents-section">
                  <h4>–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</h4>
                  <div className="documents-list">
                    {(app.files || []).length === 0 ? (
                      <p>–ù–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</p>
                    ) : (
                      (app.files || []).map((doc, index) => (
                        <div key={index} className="document-item">
                          <span className="material-icons">description</span>
                          <span>{doc}</span>
                          <button className="download-btn">
                            <span className="material-icons">download</span>
                          </button>
                        </div>
                      ))
                    )}
                  </div>
                </div>
                <div className="verification-actions">
                  <button 
                    onClick={() => { updateApp(app.id, { status: '–ü—Ä–∏–Ω—è—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é' }); finishWizard(); }}
                    className="verify-confirm-btn"
                    disabled={(app.files || []).length === 0}
                  >
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                  </button>
                  <button 
                    onClick={() => { updateApp(app.id, { status: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' }); finishWizard(); }}
                    className="verify-reject-btn"
                  >
                    –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
                  </button>
                </div>
              </div>
            )}
          </div>

          <div className="wizard-actions">
            {wizardStep > 1 && (
              <button onClick={goToPreviousStep} className="btn-previous">
                –ù–∞–∑–∞–¥
              </button>
            )}
            {wizardStep < 5 ? (
              <button 
                onClick={goToNextStep} 
                className="btn-next"
                disabled={!validateCurrentStep()}
              >
                –î–∞–ª–µ–µ
              </button>
            ) : (
              <button 
                onClick={finishWizard} 
                className="btn-finish"
                disabled={!validateCurrentStep()}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
              </button>
            )}
            <button 
              onClick={() => { setWizardAppId(null); setWizardStep(1); }} 
              className="btn-cancel"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      </div>
    );
  };

  if (!user || user.role !== 'employee') {
    navigate('/');
    return null;
  }

  const selectedApp = localApps.find(a => a.id === selectedAppId);

  return (
    <div className="employee-panel">
      <div className="page-header">
        <div className="header-content">
          <h1 className="page-title">
            <span className="material-icons">work</span>
            –ü–∞–Ω–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
          </h1>
          <p className="page-subtitle">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          </p>
        </div>
        
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="navigation-tabs">
          <button 
            className={`nav-tab ${showDashboard ? 'active' : ''}`}
            onClick={() => setShowDashboard(true)}
          >
            <span className="material-icons">dashboard</span>
            –î–∞—à–±–æ—Ä–¥
          </button>
          <button 
            className={`nav-tab ${!showDashboard ? 'active' : ''}`}
            onClick={() => setShowDashboard(false)}
          >
            <span className="material-icons">list_alt</span>
            –ó–∞—è–≤–∫–∏
            <span className="applications-count">({filteredApplications.length})</span>
          </button>
        </div>
      </div>

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ */}
      {showDashboard ? (
        <DashboardView />
      ) : (
        <>
          {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
          <div className="filters-section">
            <div className="search-box">
              <span className="material-icons">search</span>
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∏—Ç–µ–ª—é..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
            </div>
            <div className="filter-buttons">
              <button 
                className={`filter-btn ${filterStatus === 'all' ? 'active' : ''}`}
                onClick={() => setFilterStatus('all')}
              >
                –í—Å–µ ({(localApps || []).length})
              </button>
              <button 
                className={`filter-btn ${filterStatus === '–ó–∞–ø–æ–ª–Ω–µ–Ω–∞' ? 'active' : ''}`}
                onClick={() => setFilterStatus('–ó–∞–ø–æ–ª–Ω–µ–Ω–∞')}
              >
                –ó–∞–ø–æ–ª–Ω–µ–Ω—ã ({(localApps || []).filter(app => app.status === '–ó–∞–ø–æ–ª–Ω–µ–Ω–∞').length})
              </button>
              <button 
                className={`filter-btn ${filterStatus === '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' ? 'active' : ''}`}
                onClick={() => setFilterStatus('–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ')}
              >
                –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ({(localApps || []).filter(app => app.status === '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ').length})
              </button>
              <button 
                className={`filter-btn ${filterStatus === '–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞' ? 'active' : ''}`}
                onClick={() => setFilterStatus('–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞')}
              >
                –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã ({(localApps || []).filter(app => app.status === '–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞').length})
              </button>
              <button 
                className={`filter-btn ${filterStatus === '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' ? 'active' : ''}`}
                onClick={() => setFilterStatus('–û—Ç–∫–ª–æ–Ω–µ–Ω–∞')}
              >
                –û—Ç–∫–ª–æ–Ω–µ–Ω—ã ({(localApps || []).filter(app => app.status === '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞').length})
              </button>
            </div>
          </div>

          <div className="page-content">
            {/* –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ */}
            <div className="applications-section">
              <div className="section-header">
                <h2 className="section-title">
                  <span className="material-icons">list_alt</span>
                  –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
                </h2>
                <div className="section-actions">
                  <button className="action-btn secondary">
                    <span className="material-icons">add</span>
                    –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
                  </button>
                  <button className="action-btn secondary">
                    <span className="material-icons">download</span>
                    –≠–∫—Å–ø–æ—Ä—Ç
                  </button>
                </div>
              </div>
              
              <div className="applications-grid">
                {filteredApplications.length === 0 ? (
                  <div className="empty-state">
                    <div className="empty-icon">üìã</div>
                    <h3>–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
                  </div>
                ) : (
                  filteredApplications.map(app => (
                    <div key={app.id} className="application-card">
                      <div className="card-header">
                        <div className="applicant-info">
                          <h3>{app.applicant}</h3>
                          <span className={`status-badge ${(app.status || '').toLowerCase().replace(/\s+/g, '-')}`}>
                            {app.status || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
                          </span>
                        </div>
                        <div className="card-actions">
                          {app.status === '–ó–∞–ø–æ–ª–Ω–µ–Ω–∞' && (
                            <button onClick={() => setSelectedAppId(app.id)} className="action-btn primary">
                              <span className="material-icons">edit</span>
                              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                          )}
                          {app.status === '–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞' && (
                            <button onClick={() => navigate(`/otr/${app.id}`)} className="action-btn success">
                              <span className="material-icons">assignment</span>
                              –°–æ–∑–¥–∞—Ç—å –û–¢–†
                            </button>
                          )}
                          {app.status === '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' && (
                            <button onClick={() => { setSelectedAppId(app.id); setReviewMode(true); }} className="action-btn warning">
                              <span className="material-icons">visibility</span>
                              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                            </button>
                          )}
                          {app.status === '–ü—Ä–∏–Ω—è—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é' && (
                            <button onClick={() => setSelectedAppId(app.id)} className="action-btn info">
                              <span className="material-icons">assignment</span>
                              –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –û–¢–†
                            </button>
                          )}
                          {app.status === '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –û–¢–†' && (
                            <button onClick={() => setSelectedAppId(app.id)} className="action-btn info">
                              <span className="material-icons">edit_note</span>
                              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –û–¢–†
                            </button>
                          )}
                          {app.status === '–û–¢–† –≥–æ—Ç–æ–≤–æ' && (
                            <button onClick={() => navigate(`/technical/${app.id}`)} className="action-btn success">
                              <span className="material-icons">arrow_forward</span>
                              –ü–µ—Ä–µ–π—Ç–∏ –∫ –¢–£
                            </button>
                          )}
                          {app.status === '–¢–£ —Å–æ–∑–¥–∞–Ω–æ' && (
                            <button onClick={() => navigate(`/tu-approval-res/${app.id}`)} className="action-btn success">
                              <span className="material-icons">approval</span>
                              –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤ –†–≠–°
                            </button>
                          )}
                          {app.status === '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –≤ –†–≠–°' && (
                            <button onClick={() => navigate(`/tu-approval-ia/${app.id}`)} className="action-btn success">
                              <span className="material-icons">verified</span>
                              –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ò–ê
                            </button>
                          )}
                        </div>
                      </div>
                      
                      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ */}
                      <div className="card-details">
                        <div className="detail-item">
                          <span className="detail-label">–ú–æ—â–Ω–æ—Å—Ç—å:</span>
                          <span className="detail-value">{app.power || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –∫–í—Ç</span>
                        </div>
                        <div className="detail-item">
                          <span className="detail-label">–≠—Ç–∞–ø—ã:</span>
                          <span className="detail-value">{app.stages?.length || 0} –∏–∑ 6</span>
                        </div>
                        <div className="detail-item">
                          <span className="detail-label">–î–æ–∫—É–º–µ–Ω—Ç—ã:</span>
                          <span className="detail-value">{app.files?.length || 0} —Ñ–∞–π–ª–æ–≤</span>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </>
      )}

      {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ */}
      {selectedApp && !reviewMode && selectedApp.status === '–ó–∞–ø–æ–ª–Ω–µ–Ω–∞' && (
        <div className="edit-form-section">
          <div className="form-header">
            <h2 className="form-title">
              <span className="material-icons">edit</span>
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {selectedApp.applicant}
            </h2>
            
            <div className="tab-navigation">
              <button 
                className={`tab-btn ${activeTab === 'stages' ? 'active' : ''}`}
                onClick={() => setActiveTab('stages')}
              >
                <span className="material-icons">timeline</span>
                –≠—Ç–∞–ø—ã –¢–ü
              </button>
              <button 
                className={`tab-btn ${activeTab === 'asso' ? 'active' : ''}`}
                onClick={() => setActiveTab('asso')}
              >
                <span className="material-icons">description</span>
                –î–∞–Ω–Ω—ã–µ –ê–°–°–û
              </button>
              <button 
                className={`tab-btn ${activeTab === 'object' ? 'active' : ''}`}
                onClick={() => setActiveTab('object')}
              >
                <span className="material-icons">business</span>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É
              </button>
              <button 
                className={`tab-btn ${activeTab === 'print' ? 'active' : ''}`}
                onClick={() => setActiveTab('print')}
              >
                <span className="material-icons">print</span>
                –ü–µ—á–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã
              </button>
              <button 
                className={`tab-btn ${activeTab === 'power' ? 'active' : ''}`}
                onClick={() => setActiveTab('power')}
              >
                <span className="material-icons">calculate</span>
                –†–∞—Å—á–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏
              </button>
            </div>
          </div>

          <div className="form-content">
            {activeTab === 'stages' && (
              <div className="stages-tab">
                <div className="form-card">
                  <div className="card-header">
                    <h3>
                      <span className="material-icons">timeline</span>
                      –≠—Ç–∞–ø—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    </h3>
                  </div>
                  
                  <div className="power-input-section">
                    <div className="input-group">
                      <label>–ú–æ—â–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ (–∫–í—Ç)</label>
                      <input
                        type="number"
                        value={selectedApp.power}
                        onChange={(e) => handlePowerChange(selectedApp.id, e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å"
                        className="form-input"
                      />
                    </div>
                    <button onClick={() => handleFillStages(selectedApp.id)} className="fill-stages-btn">
                      <span className="material-icons">auto_fix_high</span>
                      –ó–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∞–ø—ã
                    </button>
                  </div>

                  <div className="deadlines-section">
                    <div className="input-group">
                      <label>–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–Ω–∏)</label>
                      <input
                        type="text"
                        value={selectedApp.designDeadline}
                        onChange={(e) => handleDesignDeadlineChange(selectedApp.id, e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                        className="form-input"
                      />
                    </div>
                    <div className="input-group">
                      <label>–°—Ä–æ–∫ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é (–¥–Ω–∏)</label>
                      <input
                        type="text"
                        value={selectedApp.operationDeadline}
                        onChange={(e) => handleOperationDeadlineChange(selectedApp.id, e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤–≤–æ–¥–∞"
                        className="form-input"
                      />
                    </div>
                  </div>

                  <div className="stages-list">
                    <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h4>
                    <div className="stages-grid">
                      {(selectedApp.stages || []).map(stage => (
                        <div key={stage.id} className={`stage-card ${stage.status || 'pending'}`}>
                          <div className="stage-icon">
                            <span className="material-icons">
                              {stage.status === 'completed' ? 'check_circle' : 
                               stage.status === 'in_progress' ? 'pending' : 'radio_button_unchecked'}
                            </span>
                          </div>
                          <div className="stage-content">
                            <h5>{stage.name}</h5>
                            <p className="stage-duration">{stage.duration}</p>
                            {stage.description && (
                              <p className="stage-description">{stage.description}</p>
                            )}
                          </div>
                          <div className="stage-status">
                            <span className={`status-indicator ${stage.status || 'pending'}`}>
                              {stage.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                               stage.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–û–∂–∏–¥–∞–µ—Ç'}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'asso' && (
              <div className="asso-tab">
                <div className="form-card">
                  <div className="card-header">
                    <h3>
                      <span className="material-icons">description</span>
                      –î–∞–Ω–Ω—ã–µ –ê–°–°–û
                    </h3>
                  </div>
                  
                  <div className="form-grid">
                    <div className="input-group">
                      <label>–¢–∏–ø –∑–∞—è–≤–∏—Ç–µ–ª—è</label>
                      <select 
                        name="applicantType" 
                        value={selectedApp.assoData?.applicantType || ''} 
                        onChange={(e) => handleAssoChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ">–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ</option>
                        <option value="–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ">–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ</option>
                      </select>
                    </div>

                    <div className="input-group">
                      <label>–¢–∏–ø –∑–∞—è–≤–∫–∏</label>
                      <select 
                        name="requestType" 
                        value={selectedApp.assoData?.requestType || ''} 
                        onChange={(e) => handleAssoChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞</option>
                        <option value="–ë—É–º–∞–∂–Ω–∞—è –∑–∞—è–≤–∫–∞">–ë—É–º–∞–∂–Ω–∞—è –∑–∞—è–≤–∫–∞</option>
                      </select>
                    </div>

                    <div className="input-group">
                      <label>–°–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏</label>
                      <select 
                        name="submissionMethod" 
                        value={selectedApp.assoData?.submissionMethod || ''} 
                        onChange={(e) => handleAssoChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–û–Ω–ª–∞–π–Ω">–û–Ω–ª–∞–π–Ω</option>
                        <option value="–õ–∏—á–Ω–æ">–õ–∏—á–Ω–æ</option>
                      </select>
                    </div>

                    <div className="input-group">
                      <label>–¢–∏–ø –∑–∞—è–≤–∫–∏ –ê–°–°–û</label>
                      <select 
                        name="requestTypeAso" 
                        value={selectedApp.assoData?.requestTypeAso || ''} 
                        onChange={(e) => handleAssoChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</option>
                        <option value="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π">–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π</option>
                      </select>
                    </div>

                    <div className="input-group">
                      <label>–¢–∏–ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</label>
                      <select 
                        name="connectionType" 
                        value={selectedApp.assoData?.connectionType || ''} 
                        onChange={(e) => handleAssoChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–ù–æ–≤–∞—è —Ç–æ—á–∫–∞">–ù–æ–≤–∞—è —Ç–æ—á–∫–∞</option>
                        <option value="–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ">–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ</option>
                      </select>
                    </div>

                    <div className="input-group">
                      <label>–•–∞—Ä–∞–∫—Ç–µ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏</label>
                      <select 
                        name="loadNature" 
                        value={selectedApp.assoData?.loadNature || ''} 
                        onChange={(e) => handleAssoChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è">–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è</option>
                        <option value="–ë—ã—Ç–æ–≤–∞—è">–ë—ã—Ç–æ–≤–∞—è</option>
                      </select>
                    </div>

                    <div className="input-group">
                      <label>–°–ø–æ—Å–æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
                      <select 
                        name="notificationMethod" 
                        value={selectedApp.assoData?.notificationMethod || ''} 
                        onChange={(e) => handleAssoChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</option>
                        <option value="SMS">SMS</option>
                      </select>
                    </div>

                    <div className="input-group">
                      <label>–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</label>
                      <select 
                        name="documentDelivery" 
                        value={selectedApp.assoData?.documentDelivery || ''} 
                        onChange={(e) => handleAssoChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ</option>
                        <option value="–ë—É–º–∞–∂–Ω–æ">–ë—É–º–∞–∂–Ω–æ</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'object' && (
              <div className="object-tab">
                <div className="form-card">
                  <div className="card-header">
                    <h3>
                      <span className="material-icons">business</span>
                      –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É –¢–ü
                    </h3>
                  </div>
                  
                  <div className="form-grid">
                    <div className="input-group">
                      <label>–≠–Ω–µ—Ä–≥–æ–ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</label>
                      <input
                        type="text"
                        name="energyDevice"
                        value={selectedApp.objectData?.energyDevice || ''}
                        onChange={(e) => handleObjectChange(selectedApp.id, e)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                        className="form-input"
                      />
                    </div>

                    <div className="input-group">
                      <label>–ì–æ–¥ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é</label>
                      <input
                        type="text"
                        name="yearOfOperation"
                        value={selectedApp.objectData?.yearOfOperation || ''}
                        onChange={(e) => handleObjectChange(selectedApp.id, e)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥"
                        className="form-input"
                      />
                    </div>

                    <div className="input-group">
                      <label>–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞</label>
                      <select 
                        name="objectType" 
                        value={selectedApp.objectData?.objectType || ''} 
                        onChange={(e) => handleObjectChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç">–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç</option>
                        <option value="–ñ–∏–ª–æ–π –æ–±—ä–µ–∫—Ç">–ñ–∏–ª–æ–π –æ–±—ä–µ–∫—Ç</option>
                      </select>
                    </div>

                    <div className="input-group">
                      <label>–¢–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏</label>
                      <select 
                        name="locationType" 
                        value={selectedApp.objectData?.locationType || ''} 
                        onChange={(e) => handleObjectChange(selectedApp.id, e)}
                        className="form-select"
                      >
                        <option value="–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å">–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å</option>
                        <option value="–°–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å">–°–µ–ª—å—Å–∫–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å</option>
                      </select>
                    </div>

                    <div className="input-group full-width">
                      <label>–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä</label>
                      <input
                        type="text"
                        name="cadastralNumber"
                        value={selectedApp.objectData?.cadastralNumber || ''}
                        onChange={(e) => handleObjectChange(selectedApp.id, e)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä"
                        className="form-input"
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'print' && (
              <div className="print-tab">
                <div className="form-card">
                  <div className="card-header">
                    <h3>
                      <span className="material-icons">print</span>
                      –ü–µ—á–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞—è–≤–∫–∏: {selectedApp.applicant}
                    </h3>
                  </div>
                  
                  <div className="print-forms-section">
                    <div className="forms-overview">
                      <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—á–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã:</h4>
                      <div className="forms-grid">
                        <div className="form-item">
                          <div className="form-icon">
                            <span className="material-icons">description</span>
                          </div>
                          <div className="form-info">
                            <h5>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</h5>
                            <p>–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¢–ü</p>
                          </div>
                          <div className="form-actions">
                            <button className="btn-preview" title="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä">
                              <span className="material-icons">visibility</span>
                            </button>
                            <button className="btn-print" title="–ü–µ—á–∞—Ç—å">
                              <span className="material-icons">print</span>
                            </button>
                            <button className="btn-save" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
                              <span className="material-icons">save</span>
                            </button>
                          </div>
                        </div>

                        <div className="form-item">
                          <div className="form-icon">
                            <span className="material-icons">assignment</span>
                          </div>
                          <div className="form-info">
                            <h5>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è</h5>
                            <p>–¢–£ –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</p>
                          </div>
                          <div className="form-actions">
                            <button className="btn-preview" title="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä">
                              <span className="material-icons">visibility</span>
                            </button>
                            <button className="btn-print" title="–ü–µ—á–∞—Ç—å">
                              <span className="material-icons">print</span>
                            </button>
                            <button className="btn-save" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
                              <span className="material-icons">save</span>
                            </button>
                          </div>
                        </div>

                        <div className="form-item">
                          <div className="form-icon">
                            <span className="material-icons">receipt</span>
                          </div>
                          <div className="form-info">
                            <h5>–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</h5>
                            <p>–¢–∏–ø–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞</p>
                          </div>
                          <div className="form-actions">
                            <button className="btn-preview" title="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä">
                              <span className="material-icons">visibility</span>
                            </button>
                            <button className="btn-print" title="–ü–µ—á–∞—Ç—å">
                              <span className="material-icons">print</span>
                            </button>
                            <button className="btn-save" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
                              <span className="material-icons">save</span>
                            </button>
                          </div>
                        </div>

                        <div className="form-item">
                          <div className="form-icon">
                            <span className="material-icons">check_circle</span>
                          </div>
                          <div className="form-info">
                            <h5>–ê–∫—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¢–£</h5>
                            <p>–ê–∫—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π</p>
                          </div>
                          <div className="form-actions">
                            <button className="btn-preview" title="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä">
                              <span className="material-icons">visibility</span>
                            </button>
                            <button className="btn-print" title="–ü–µ—á–∞—Ç—å">
                              <span className="material-icons">print</span>
                            </button>
                            <button className="btn-save" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
                              <span className="material-icons">save</span>
                            </button>
                          </div>
                        </div>

                        <div className="form-item">
                          <div className="form-icon">
                            <span className="material-icons">payment</span>
                          </div>
                          <div className="form-info">
                            <h5>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É</h5>
                            <p>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥ –¢–ü</p>
                          </div>
                          <div className="form-actions">
                            <button className="btn-preview" title="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä">
                              <span className="material-icons">visibility</span>
                            </button>
                            <button className="btn-print" title="–ü–µ—á–∞—Ç—å">
                              <span className="material-icons">print</span>
                            </button>
                            <button className="btn-save" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
                              <span className="material-icons">save</span>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="print-settings">
                      <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—á–∞—Ç–∏:</h4>
                      <div className="settings-grid">
                        <div className="setting-group">
                          <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π:</label>
                          <input type="number" min="1" max="10" defaultValue="1" className="form-input" />
                        </div>
                        <div className="setting-group">
                          <label>–§–æ—Ä–º–∞—Ç:</label>
                          <select className="form-select">
                            <option value="A4">A4</option>
                            <option value="A3">A3</option>
                          </select>
                        </div>
                        <div className="setting-group">
                          <label>–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è:</label>
                          <select className="form-select">
                            <option value="portrait">–ö–Ω–∏–∂–Ω–∞—è</option>
                            <option value="landscape">–ê–ª—å–±–æ–º–Ω–∞—è</option>
                          </select>
                        </div>
                      </div>
                    </div>

                    <div className="print-actions">
                      <button className="btn-print-all">
                        <span className="material-icons">print</span>
                        –ü–µ—á–∞—Ç—å –≤—Å–µ—Ö —Ñ–æ—Ä–º
                      </button>
                      <button className="btn-save-all">
                        <span className="material-icons">save</span>
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤ PDF
                      </button>
                      <button className="btn-email-all">
                        <span className="material-icons">email</span>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ email
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'power' && (
              <div className="power-tab">
                <div className="form-card">
                  <div className="card-header">
                    <h3>
                      <span className="material-icons">calculate</span>
                      –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–∞/–¥–µ—Ñ–∏—Ü–∏—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—è–≤–∫–∏: {selectedApp.applicant}
                    </h3>
                  </div>
                  
                  <div className="power-calculation-section">
                    <div className="calculation-overview">
                      <h4>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞—Å—á–µ—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏:</h4>
                      <div className="calculation-features">
                        <div className="feature-item">
                          <div className="feature-icon">
                            <span className="material-icons">monitoring</span>
                          </div>
                          <div className="feature-info">
                            <h5>–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–Ω—è</h5>
                            <p>–í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–º–µ—Ä–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã</p>
                          </div>
                          <div className="feature-actions">
                            <button className="btn-create" onClick={() => navigate('/power-calculation')}>
                              <span className="material-icons">add</span>
                              –°–æ–∑–¥–∞—Ç—å
                            </button>
                          </div>
                        </div>

                        <div className="feature-item">
                          <div className="feature-icon">
                            <span className="material-icons">analytics</span>
                          </div>
                          <div className="feature-info">
                            <h5>–†–∞—Å—á–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ –ø–∏—Ç–∞–Ω–∏—è</h5>
                            <p>–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–∞ –∏–ª–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ –ø–∏—Ç–∞–Ω–∏—è</p>
                          </div>
                          <div className="feature-actions">
                            <button className="btn-create" onClick={() => navigate('/power-calculation')}>
                              <span className="material-icons">add</span>
                              –°–æ–∑–¥–∞—Ç—å
                            </button>
                          </div>
                        </div>

                        <div className="feature-item">
                          <div className="feature-icon">
                            <span className="material-icons">assessment</span>
                          </div>
                          <div className="feature-info">
                            <h5>–û—Ç—á–µ—Ç—ã –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ</h5>
                            <p>–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ –ø–∏—Ç–∞–Ω–∏—è</p>
                          </div>
                          <div className="feature-actions">
                            <button className="btn-generate" onClick={() => navigate('/power-calculation')}>
                              <span className="material-icons">description</span>
                              –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="power-status-section">
                      <h4>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ—â–Ω–æ—Å—Ç–∏:</h4>
                      <div className="power-status-grid">
                        <div className="status-card">
                          <div className="status-header">
                            <span className="material-icons">power</span>
                            <h5>–ó–∞—è–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å</h5>
                          </div>
                          <div className="status-value">
                            <span className="power-value">{selectedApp.power || 0}</span>
                            <span className="power-unit">–∫–í—Ç</span>
                          </div>
                        </div>

                        <div className="status-card">
                          <div className="status-header">
                            <span className="material-icons">trending_up</span>
                            <h5>–î–æ—Å—Ç—É–ø–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å</h5>
                          </div>
                          <div className="status-value">
                            <span className="power-value">150</span>
                            <span className="power-unit">–∫–í—Ç</span>
                          </div>
                        </div>

                        <div className="status-card">
                          <div className="status-header">
                            <span className="material-icons">balance</span>
                            <h5>–ë–∞–ª–∞–Ω—Å –º–æ—â–Ω–æ—Å—Ç–∏</h5>
                          </div>
                          <div className="status-value">
                            <span className={`power-value ${(selectedApp.power || 0) <= 150 ? 'positive' : 'negative'}`}>
                              {150 - (selectedApp.power || 0)}
                            </span>
                            <span className="power-unit">–∫–í—Ç</span>
                          </div>
                        </div>

                        <div className="status-card">
                          <div className="status-header">
                            <span className="material-icons">info</span>
                            <h5>–°—Ç–∞—Ç—É—Å</h5>
                          </div>
                          <div className="status-value">
                            <span className={`status-badge ${(selectedApp.power || 0) <= 150 ? 'available' : 'deficit'}`}>
                              {(selectedApp.power || 0) <= 150 ? '–î–æ—Å—Ç—É–ø–Ω–æ' : '–î–µ—Ñ–∏—Ü–∏—Ç'}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="power-actions">
                      <button className="btn-calculate-all" onClick={() => navigate('/power-calculation')}>
                        <span className="material-icons">calculate</span>
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å—á–µ—Ç—É –º–æ—â–Ω–æ—Å—Ç–∏
                      </button>
                      <button className="btn-report" onClick={() => navigate('/power-calculation')}>
                        <span className="material-icons">assessment</span>
                        –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
                      </button>
                      <button className="btn-schedule" onClick={() => navigate('/power-calculation')}>
                        <span className="material-icons">schedule</span>
                        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          <div className="form-actions">
            <div className="action-buttons">
              <button 
                onClick={() => setSelectedAppId(null)} 
                className="btn-cancel"
              >
                <span className="material-icons">close</span>
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                onClick={() => handleSubmitForReview(selectedApp.id)} 
                className="btn-submit"
                disabled={!selectedApp.power || !selectedApp.stages || selectedApp.stages.length === 0}
              >
                <span className="material-icons">send</span>
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
              </button>
            </div>
            <div className="completion-status">
              <div className="status-item">
                <span className={`status-icon ${selectedApp.power ? 'completed' : 'pending'}`}>
                  <span className="material-icons">
                    {selectedApp.power ? 'check_circle' : 'radio_button_unchecked'}
                  </span>
                </span>
                <span className="status-text">–ú–æ—â–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞</span>
              </div>
              <div className="status-item">
                <span className={`status-icon ${selectedApp.stages && selectedApp.stages.length > 0 ? 'completed' : 'pending'}`}>
                  <span className="material-icons">
                    {selectedApp.stages && selectedApp.stages.length > 0 ? 'check_circle' : 'radio_button_unchecked'}
                  </span>
                </span>
                <span className="status-text">–≠—Ç–∞–ø—ã –¢–ü –∑–∞–ø–æ–ª–Ω–µ–Ω—ã</span>
              </div>
              <div className="status-item">
                <span className={`status-icon ${selectedApp.assoData ? 'completed' : 'pending'}`}>
                  <span className="material-icons">
                    {selectedApp.assoData ? 'check_circle' : 'radio_button_unchecked'}
                  </span>
                </span>
                <span className="status-text">–î–∞–Ω–Ω—ã–µ –ê–°–°–û –∑–∞–ø–æ–ª–Ω–µ–Ω—ã</span>
              </div>
              <div className="status-item">
                <span className={`status-icon ${selectedApp.objectData?.energyDevice ? 'completed' : 'pending'}`}>
                  <span className="material-icons">
                    {selectedApp.objectData?.energyDevice ? 'check_circle' : 'radio_button_unchecked'}
                  </span>
                </span>
                <span className="status-text">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∞</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ */}
      {selectedApp && reviewMode && selectedApp.status === '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' && (
        <div className="review-section">
          <div className="form-card">
            <div className="card-header">
              <h3>
                <span className="material-icons">visibility</span>
                –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏: {selectedApp.applicant}
              </h3>
            </div>
            
            <div className="review-content">
              <div className="review-grid">
                <div className="review-section">
                  <h4>
                    <span className="material-icons">info</span>
                    –†–µ–∫–≤–∏–∑–∏—Ç—ã
                  </h4>
                  <div className="info-list">
                    <div className="info-item">
                      <span className="label">–ú–æ—â–Ω–æ—Å—Ç—å:</span>
                      <span className="value">{selectedApp.power} –∫–í—Ç</span>
                    </div>
                    <div className="info-item">
                      <span className="label">–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</span>
                      <span className="value">{selectedApp.designDeadline}</span>
                    </div>
                    <div className="info-item">
                      <span className="label">–°—Ä–æ–∫ –≤–≤–æ–¥–∞:</span>
                      <span className="value">{selectedApp.operationDeadline}</span>
                    </div>
                  </div>
                </div>

                <div className="review-section">
                  <h4>
                    <span className="material-icons">description</span>
                    –î–∞–Ω–Ω—ã–µ –ê–°–°–û
                  </h4>
                  <div className="info-list">
                    <div className="info-item">
                      <span className="label">–¢–∏–ø –∑–∞—è–≤–∏—Ç–µ–ª—è:</span>
                      <span className="value">{selectedApp.assoData?.applicantType}</span>
                    </div>
                  </div>
                </div>

                <div className="review-section">
                  <h4>
                    <span className="material-icons">business</span>
                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É
                  </h4>
                  <div className="info-list">
                    <div className="info-item">
                      <span className="label">–≠–Ω–µ—Ä–≥–æ–ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</span>
                      <span className="value">{selectedApp.objectData?.energyDevice}</span>
                    </div>
                  </div>
                </div>

                <div className="review-section">
                  <h4>
                    <span className="material-icons">attach_file</span>
                    –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                  </h4>
                  <div className="files-list">
                    {(selectedApp.files || []).map((file, index) => (
                      <div key={index} className="file-item">
                        <span className="material-icons">description</span>
                        <span>{file}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            <div className="review-actions">
              <button onClick={() => handleAcceptTask(selectedApp.id)} className="accept-btn">
                <span className="material-icons">check_circle</span>
                –ü—Ä–∏–Ω—è—Ç—å –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –û–¢–† */}
      {selectedApp && (selectedApp.status === '–ü—Ä–∏–Ω—è—Ç–∞ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é' || selectedApp.status === '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –û–¢–†') && (
        <div className="otr-section">
          <div className="form-card">
            <div className="card-header">
              <h3>
                <span className="material-icons">assignment</span>
                –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –û–¢–†: {selectedApp.applicant}
              </h3>
            </div>
            
            <div className="otr-content">
              <div className="otr-form-grid">
                <div className="input-group">
                  <label>–¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞</label>
                  <select
                    name="tariffType"
                    value={selectedApp.otr?.tariffType || '–¢–∞—Ä–∏—Ñ 1'}
                    onChange={(e) => updateApp(selectedApp.id, { otr: { ...selectedApp.otr, tariffType: e.target.value } })}
                    className="form-select"
                  >
                    <option value="–¢–∞—Ä–∏—Ñ 1">–¢–∞—Ä–∏—Ñ 1</option>
                    <option value="–¢–∞—Ä–∏—Ñ 2">–¢–∞—Ä–∏—Ñ 2</option>
                  </select>
                </div>

                <div className="input-group">
                  <label>–£–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ (–∫–º)</label>
                  <input
                    type="text"
                    name="distance"
                    value={selectedApp.otr?.distance || ''}
                    onChange={(e) => updateApp(selectedApp.id, { otr: { ...selectedApp.otr, distance: e.target.value } })}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å"
                    className="form-input"
                  />
                </div>
              </div>

              <div className="network-structure-section">
                <h4>
                  <span className="material-icons">account_tree</span>
                  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏ —Ç–æ—á–µ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                </h4>
                <div className="structure-controls">
                  <select 
                    onChange={(e) => handleFillNetworkStructure(selectedApp.id, parseInt(e.target.value))}
                    className="form-select"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É</option>
                    {networkStructureCatalog.map(struct => (
                      <option key={struct.id} value={struct.id}>{struct.chain[0]}</option>
                    ))}
                  </select>
                  <button onClick={() => handleFillNetworkStructure(selectedApp.id, networkStructureCatalog[0].id)} className="fill-btn">
                    <span className="material-icons">auto_fix_high</span>
                    –ó–∞–ø–æ–ª–Ω–∏—Ç—å
                  </button>
                </div>
                <div className="structure-list">
                  {(selectedApp.otr?.networkStructure || []).map((item, idx) => (
                    <div key={idx} className="structure-item">
                      <span className="material-icons">fiber_manual_record</span>
                      <span>{item}</span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="activities-section">
                <h4>
                  <span className="material-icons">engineering</span>
                  –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –°–û
                </h4>
                <button onClick={() => handleAddSoActivity(selectedApp.id)} className="add-btn">
                  <span className="material-icons">add</span>
                  –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                </button>
                <div className="activities-list">
                  {(selectedApp.otr?.soActivities || []).map((act, idx) => (
                    <div key={act.id} className="activity-card">
                      <div className="activity-inputs">
                        <input
                          type="text"
                          value={act.section}
                          onChange={(e) => handleUpdateSoActivity(selectedApp.id, idx, 'section', e.target.value)}
                          placeholder="–†–∞–∑–¥–µ–ª –¢–£"
                          className="form-input"
                        />
                        <input
                          type="text"
                          value={act.voltage}
                          onChange={(e) => handleUpdateSoActivity(selectedApp.id, idx, 'voltage', e.target.value)}
                          placeholder="–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ"
                          className="form-input"
                        />
                        <input
                          type="text"
                          value={act.length}
                          onChange={(e) => handleUpdateSoActivity(selectedApp.id, idx, 'length', e.target.value)}
                          placeholder="–ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å"
                          className="form-input"
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="activities-section">
                <h4>
                  <span className="material-icons">person</span>
                  –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º
                </h4>
                <button onClick={() => handleAddApplicantActivity(selectedApp.id)} className="add-btn">
                  <span className="material-icons">add</span>
                  –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                </button>
                <div className="activities-list">
                  {(selectedApp.otr?.applicantActivities || []).map((act, idx) => (
                    <div key={act.id} className="activity-card">
                      <input
                        type="text"
                        value={act.section}
                        onChange={(e) => handleUpdateApplicantActivity(selectedApp.id, idx, e.target.value)}
                        placeholder="–†–∞–∑–¥–µ–ª –¢–£"
                        className="form-input"
                      />
                    </div>
                  ))}
                </div>
              </div>

              <div className="signatories-section">
                <h4>
                  <span className="material-icons">how_to_reg</span>
                  –ü–æ–¥–ø–∏—Å—ã–≤–∞—é—â–∏–µ –ª–∏—Ü–∞
                </h4>
                <button onClick={() => handleAddSignatory(selectedApp.id)} className="add-btn">
                  <span className="material-icons">add</span>
                  –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞
                </button>
                <div className="signatories-list">
                  {(selectedApp.otr?.signatories || []).map((sign, idx) => (
                    <div key={sign.id} className="signatory-card">
                      <input
                        type="text"
                        value={sign.name}
                        onChange={(e) => handleUpdateSignatory(selectedApp.id, idx, 'name', e.target.value)}
                        placeholder="–§–ò–û"
                        className="form-input"
                      />
                      <input
                        type="text"
                        value={sign.position}
                        onChange={(e) => handleUpdateSignatory(selectedApp.id, idx, 'position', e.target.value)}
                        placeholder="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                        className="form-input"
                      />
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <div className="otr-actions">
              <button onClick={() => handleSaveOtr(selectedApp.id)} className="save-otr-btn">
                <span className="material-icons">save</span>
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ –¢–£
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –û–¢–† –≥–æ—Ç–æ–≤–æ */}
      {selectedApp && selectedApp.status === '–û–¢–† –≥–æ—Ç–æ–≤–æ' && (
        <div className="otr-ready-section">
          <div className="form-card">
            <div className="card-header">
              <h3>
                <span className="material-icons">check_circle</span>
                –û–¢–† –≥–æ—Ç–æ–≤–æ: {selectedApp.applicant}
              </h3>
            </div>
            
            <div className="ready-content">
              <div className="success-message">
                <span className="material-icons">celebration</span>
                <p>–û–¢–† —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —É—Å–ª–æ–≤–∏—è–º</p>
              </div>
              
              <button onClick={() => navigate(`/technical/${selectedApp.id}`)} className="continue-btn">
                <span className="material-icons">arrow_forward</span>
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –¢–£
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Wizard –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
      {wizardAppId && renderWizard()}
    </div>
  );
};

export default EmployeePanel;